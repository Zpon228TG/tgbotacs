import time
import requests
import telebot
from telebot import types
import json
import os
import threading
import re
import random
import string


# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –∑–¥–µ—Å—å
API_TOKEN = '7024190964:AAEzgPV9RvoJMbBBShBvSo-K5yEIsq08D4I'
CHANNEL_ID = '@GameDevAssetsHub'
LOG_CHANNEL_ID_TOKENS = '@GameDevAssetsHub'  # –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
SUPPORT_BOT_LINK = 'https://t.me/your_support_bot'
TOKENS_FILE = 'tokens.json'
USERS_FILE = 'users.json'
ADMIN_ID = '6578018656'  # –í–∞—à ID
BLOCKED_USERS_FILE = 'blocked_users.json'

# –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞ –≤—ã–≤–æ–¥
WITHDRAWAL_FEE_PERCENT = 1.5

bot = telebot.TeleBot(API_TOKEN)

def load_data(file_name):
    if os.path.exists(file_name):
        with open(file_name, 'r') as file:
            return json.load(file)
    else:
        return {}

def save_data(file_name, data):
    with open(file_name, 'w') as file:
        json.dump(data, file, indent=4)

# –ó–∞–≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ
tokens_data = load_data(TOKENS_FILE) or {}
users_data = load_data(USERS_FILE) or {}

def add_user(user_id):
    if user_id not in users_data:
        users_data[user_id] = {
            'balance': 0.0,
            'tokens': [],
            'total_tokens': 0,
            'accepted_rules': False  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
        }
        save_data(USERS_FILE, users_data)


def generate_tokens_filename(user_id):
    return f"{user_id}_working_tokens.txt"

# –ó–∞–≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
blocked_users_data = load_data(BLOCKED_USERS_FILE) or {}

def save_blocked_users():
    save_data(BLOCKED_USERS_FILE, blocked_users_data)

def add_tokens(user_id, tokens):
    global tokens_data
    if not isinstance(tokens_data, dict):
        tokens_data = {}

    unique_tokens = [token for token in tokens if token not in tokens_data]
    working_tokens = []
    non_working_tokens = []

    if unique_tokens:
        if can_send_message(user_id):
            checking_message = bot.send_message(user_id, "–ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω—ã, –æ–∂–∏–¥–∞–π—Ç–µ...")

        def check_tokens():
            nonlocal working_tokens, non_working_tokens

            def worker(token):
                if check_token(token):
                    working_tokens.append(token)
                else:
                    non_working_tokens.append(token)
                time.sleep(0.5)

            threads = []
            for token in unique_tokens:
                thread = threading.Thread(target=worker, args=(token,))
                thread.start()
                threads.append(thread)

            for thread in threads:
                thread.join()

            for token in working_tokens:
                tokens_data[token] = user_id
                users_data[user_id]['tokens'].append(token)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            total_working = len(working_tokens)
            total_amount = total_working * 0.01
            users_data[user_id]['balance'] += total_amount  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∫ –±–∞–ª–∞–Ω—Å—É
            users_data[user_id]['total_tokens'] += len(tokens)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤

            save_data(USERS_FILE, users_data)
            save_data(TOKENS_FILE, tokens_data)

            total_non_working = len(non_working_tokens)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
            if can_send_message(user_id):
                bot.send_message(
                    user_id,
                    f"–†–∞–±–æ—á–∏—Ö: {total_working}\n–ù–µ—Ä–∞–±–æ—á–∏—Ö: {total_non_working}\n–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ: {total_amount:.2f} —Ä—É–±–ª–µ–π"
                )
                bot.send_message(user_id, f"ü™ô –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(tokens)}")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å —Ä–∞–±–æ—á–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
            if total_working > 0:
                filename = generate_tokens_filename(user_id)
                with open(filename, 'w', encoding='utf-8') as file:
                    for token in working_tokens:
                        file.write(token + '\n')

                log_message(f"#–¢–æ–∫–µ–Ω—ã{user_id} –§–∞–π–ª —Å —Ä–∞–±–æ—á–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
                try:
                    with open(filename, 'rb') as file:
                        bot.send_document(LOG_CHANNEL_ID_TOKENS, file, caption="–§–∞–π–ª —Å —Ä–∞–±–æ—á–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
                except FileNotFoundError:
                    log_message(f"#–¢–æ–∫–µ–Ω—ã{user_id} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                except UnicodeEncodeError:
                    log_message(f"#–¢–æ–∫–µ–Ω—ã{user_id} –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")
                finally:
                    if os.path.exists(filename):
                        os.remove(filename)  # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            else:
                log_message(f"#Checktoken{user_id} –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: –†–∞–±–æ—á–∏—Ö: 0, –ù–µ —Ä–∞–±–æ—á–∏—Ö: {total_non_working}")

            if can_send_message(user_id):
                bot.delete_message(user_id, checking_message.message_id)

        threading.Thread(target=check_tokens).start()
        return len(unique_tokens)
    else:
        if can_send_message(user_id):
            bot.send_message(user_id, "–í—Å–µ —Ç–æ–∫–µ–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
        return 0




def check_token(token):
    url = "https://id.twitch.tv/oauth2/validate"
    headers = {"Authorization": f"OAuth {token}".encode('utf-8')}
    response = requests.get(url, headers=headers)
    return response.status_code == 200

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def restart_bot():
    subprocess.Popen(['python', 'bot.py'])

def log_message(message):
    try:
        bot.send_message(LOG_CHANNEL_ID_TOKENS, message)
    except telebot.apihelper.ApiTelegramException as e:
        error_code = e.result_json.get('error_code', None)
        if error_code == 400:
            log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}")
        elif error_code == 429:
            time.sleep(30)
            log_message(message)
        else:
            log_message(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}")
    except UnicodeEncodeError:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        bot.send_message(LOG_CHANNEL_ID_TOKENS, "–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")






def download_tokens():
    filename = 'working_tokens.txt'
    with open(filename, 'w', newline='', encoding='utf-8') as file:
        for token in tokens_data.keys():
            file.write(token + '\n')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if os.path.getsize(filename) == 0:
        log_message("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –ø—É—Å—Ç.")



last_message_times = {}

def can_send_message(user_id):
    current_time = time.time()
    last_time = last_message_times.get(user_id, 0)
    if current_time - last_time >= 5:
        last_message_times[user_id] = current_time
        return True
    return False



def main_keyboard(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã"))
    markup.add(types.KeyboardButton("üíº –ü—Ä–æ—Ñ–∏–ª—å"))
    markup.add(types.KeyboardButton("üÜò –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞"))
    if user_id == ADMIN_ID:
        markup.add(types.KeyboardButton("üîß –ê–¥–º–∏–Ω–∫–∞"))
    return markup

def back_to_main_keyboard(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã"))
    markup.add(types.KeyboardButton("üíº –ü—Ä–æ—Ñ–∏–ª—å"))
    markup.add(types.KeyboardButton("üÜò –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞"))
    if user_id == ADMIN_ID:
        markup.add(types.KeyboardButton("üîß –ê–¥–º–∏–Ω–∫–∞"))
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.chat.id)
    add_user(user_id)
    if user_id not in blocked_users_data:
        log_message(f"#–ù–æ–≤—ã–π–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{user_id} –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
    if not users_data[user_id]['accepted_rules']:
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ - (https://your_rules_link). –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ '–°–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è'.")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–°–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"))
        bot.send_message(user_id, "–í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=markup)
    else:
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard(user_id))



@bot.message_handler(func=lambda message: message.text == "–°–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
def accept_rules(message):
    user_id = str(message.chat.id)
    users_data[user_id]['accepted_rules'] = True
    save_data(USERS_FILE, users_data)
    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.", reply_markup=main_keyboard(user_id))



@bot.message_handler(func=lambda message: message.text == "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
def upload_tokens(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ß–µ—Ä–µ–∑ —Ñ–∞–π–ª"))
    markup.add(types.KeyboardButton("–ß–µ—Ä–µ–∑ –±–æ—Ç–∞"))
    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ß–µ—Ä–µ–∑ —Ñ–∞–π–ª")
def upload_tokens_file(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏.")

@bot.message_handler(content_types=['document'])
def handle_docs(message):
    if message.document.mime_type == 'text/plain':
        user_id = str(message.chat.id)
        file_info = bot.get_file(message.document.file_id)
        file = bot.download_file(file_info.file_path)
        tokens = file.decode('utf-8').splitlines()
        count = add_tokens(user_id, tokens)
        if count > 0:
            bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {count} —Ç–æ–∫–µ–Ω–æ–≤. üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=back_to_main_keyboard(user_id))
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt).")

@bot.message_handler(func=lambda message: message.text == "–ß–µ—Ä–µ–∑ –±–æ—Ç–∞")
def upload_tokens_via_bot(message):
    user_id = str(message.chat.id)  # –ü–æ–ª—É—á–∞–µ–º user_id
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –ø–æ –æ–¥–Ω–æ–º—É (–º–∞–∫—Å–∏–º—É–º 15). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
    bot.register_next_step_handler(message, collect_tokens, [], user_id)  # –ü–µ—Ä–µ–¥–∞–µ–º user_id


def collect_tokens(message, tokens, user_id):
    if message.text.lower() == '–≥–æ—Ç–æ–≤–æ' or len(tokens) == 15:
        if tokens:
            count = add_tokens(user_id, tokens)
            if count > 0:
                bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {count} —Ç–æ–∫–µ–Ω–æ–≤. üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            else:
                bot.send_message(message.chat.id, "–í—Å–µ —Ç–æ–∫–µ–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
        else:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=back_to_main_keyboard(user_id))
    else:
        tokens.append(message.text)
        bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω {len(tokens)}/15 –¥–æ–±–∞–≤–ª–µ–Ω.")
        bot.register_next_step_handler(message, collect_tokens, tokens, user_id)


@bot.message_handler(func=lambda message: message.text == "üíº –ü—Ä–æ—Ñ–∏–ª—å")
def profile(message):
    user_id = str(message.chat.id)
    user_data = users_data.get(user_id, {})
    balance = user_data.get('balance', 0.0)
    total_tokens = user_data.get('total_tokens', 0)

    profile_text = (
        f"üÜî –í–∞—à ID: {user_id}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±–ª–µ–π\n"
        f"ü™ô –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {total_tokens}"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏", callback_data="withdraw"))
    markup.add(types.InlineKeyboardButton("üìù –û—Ç–∑—ã–≤—ã", url="https://t.me/your_feedback_channel"))
    markup.add(types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞", url="https://playerok.com/profile/ArseniyX/products"))
    bot.send_message(message.chat.id, profile_text, reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data.startswith("withdraw"))
def process_withdrawal_amount(call):
    user_id = str(call.message.chat.id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
    try:
        amount = float(call.message.text)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
        if amount < 5:
            bot.send_message(call.message.chat.id, "–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Ä–∞–±–æ—á–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤.")
            bot.register_next_step_handler(call.message, process_withdrawal_amount)
        elif amount <= users_data.get(user_id, {}).get('balance', 0.0):
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
            fee = amount * (WITHDRAWAL_FEE_PERCENT / 100)
            net_amount = amount - fee

            # –£–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –∏ –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ–º —Ö–æ–ª–¥
            users_data[user_id]['balance'] -= net_amount
            save_data(USERS_FILE, users_data)

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
            bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ Payeer –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ {net_amount:.2f} —Ä—É–±–ª–µ–π (—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ {fee:.2f} —Ä—É–±–ª–µ–π):", reply_markup=markup)
            bot.register_next_step_handler(call.message, process_payeer_address, net_amount, fee)
        else:
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–º–∏–Ω–∏–º—É–º 5 —Ä—É–±–ª–µ–π –∏ –Ω–µ –±–æ–ª—å—à–µ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞).")
            bot.register_next_step_handler(call.message, process_withdrawal_amount)
    except ValueError:
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        bot.register_next_step_handler(call.message, process_withdrawal_amount)




@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def go_back(message):
    user_id = str(message.chat.id)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=back_to_main_keyboard(user_id))



def process_withdrawal_amount(message):
    user_id = str(message.chat.id)
    try:
        amount = float(message.text)
        if amount >= 5 and amount <= users_data.get(user_id, {}).get('balance', 0.0):
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
            fee = amount * (WITHDRAWAL_FEE_PERCENT / 100)
            net_amount = amount - fee

            # –£–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –∏ –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ–º —Ö–æ–ª–¥
            users_data[user_id]['balance'] -= net_amount  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
            save_data(USERS_FILE, users_data)
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
            bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ Payeer –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ {net_amount:.2f} —Ä—É–±–ª–µ–π (—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ {fee:.2f} —Ä—É–±–ª–µ–π):", reply_markup=markup)
            bot.register_next_step_handler(message, process_payeer_address, net_amount, fee)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–º–∏–Ω–∏–º—É–º 5 —Ä—É–±–ª–µ–π –∏ –Ω–µ –±–æ–ª—å—à–µ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞).")
            bot.register_next_step_handler(message, process_withdrawal_amount)
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        bot.register_next_step_handler(message, process_withdrawal_amount)


def process_payeer_address(message, net_amount, fee):
    user_id = str(message.chat.id)
    payeer_address = message.text.strip()
    
    if re.match(r'^\d+$', payeer_address):  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –í–µ—Ä–Ω–æ", callback_data=f"confirm_{user_id}_{net_amount}_{fee}"))
        markup.add(types.InlineKeyboardButton("‚ùå –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"edit_{user_id}_{net_amount}_{fee}"))
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ Payeer –∫–æ—à–µ–ª—å–∫–∞: {payeer_address}\n–í–µ—Ä–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å?",
            reply_markup=markup
        )
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å Payeer (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        bot.register_next_step_handler(message, process_payeer_address, net_amount, fee)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def confirm_payeer_address(call):
    _, user_id, net_amount, fee = call.data.split("_")
    net_amount, fee = float(net_amount), float(fee)
    
    # –û—Ñ–æ—Ä–º–ª—è–µ–º –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
    bot.send_message(
        CHANNEL_ID,
        f"üíµ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n"
        f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
        f"üí∞ –°—É–º–º–∞: {net_amount:.2f} —Ä—É–±–ª–µ–π\n"
        f"üì© –ê–¥—Ä–µ—Å Payeer: {call.message.text}\n",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ", callback_data=f"paid_{user_id}_{net_amount}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}_{net_amount}_{fee}")
        )
    )
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    log_message(f"#–í—ã–≤–æ–¥{user_id} –°—É–º–º–∞ {net_amount:.2f}, –ê–¥—Ä–µ—Å Payeer {call.message.text}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def edit_payeer_address(call):
    _, user_id, net_amount, fee = call.data.split("_")
    bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å Payeer:",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
            types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
        )
    )
    bot.register_next_step_handler(call.message, process_payeer_address, float(net_amount), float(fee))
    bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("paid_"))
def paid_callback(call):
    _, user_id, net_amount = call.data.split("_")
    net_amount = float(net_amount)
    bot.send_message(call.message.chat.id, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–ª–∞—Ç–∏–ª–∏ {net_amount:.2f} —Ä—É–±–ª–µ–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å. –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!")
    bot.send_message(user_id, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–ª–∞—Ç–∏–ª–∏ {net_amount:.2f} —Ä—É–±–ª–µ–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å. –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!")
    log_message(f"#–í—ã–ø–ª–∞—Ç–∞{user_id} –í—ã–ø–ª–∞—Ç–∞ {net_amount:.2f} —Ä—É–±–ª–µ–π —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    bot.edit_message_text("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.", call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("cancel_"))
def cancel_callback(call):
    _, user_id, amount, fee = call.data.split("_")
    amount, fee = float(amount), float(fee)
    users_data[user_id]['balance'] += amount  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å
    users_data[user_id]['balance'] -= fee  # –£–º–µ–Ω—å—à–∞–µ–º —Ö–æ–ª–¥ –Ω–∞ —Å—É–º–º—É –∫–æ–º–∏—Å—Å–∏–∏
    save_data(USERS_FILE, users_data)
    
    bot.send_message(call.message.chat.id, "‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π!")
    bot.send_message(user_id, "‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π!")
    log_message(f"#–û—Ç–º–µ–Ω–∞–≤—ã–ø–ª–∞—Ç–∞{user_id} –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount:.2f} —Ä—É–±–ª–µ–π –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
    bot.edit_message_text("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.", call.message.chat.id, call.message.message_id)

@bot.message_handler(func=lambda message: message.text == "üîß –ê–¥–º–∏–Ω–∫–∞")
def admin_panel(message):
    if str(message.chat.id) == ADMIN_ID:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ç–æ–∫–µ–Ω—ã"))
        markup.add(types.KeyboardButton("üó® –†–∞—Å—Å—ã–ª–∫–∞"))
        markup.add(types.KeyboardButton("üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
        markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω–∫–∞", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
def user_management(message):
    if str(message.chat.id) == ADMIN_ID:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("üîé –ü–æ–∏—Å–∫ –ø–æ ID"))
        markup.add(types.KeyboardButton("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
        markup.add(types.KeyboardButton("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
        markup.add(types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
        markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üîé –ü–æ–∏—Å–∫ –ø–æ ID")
def search_user_by_id(message):
    if str(message.chat.id) == ADMIN_ID:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        bot.register_next_step_handler(message, search_user_by_id_process)


def search_user_by_id_process(message):
    user_id = message.text.strip()
    if user_id in users_data:
        user_info = users_data[user_id]
        bot.send_message(
            message.chat.id,
            f"üÜî ID: {user_id}\nüí∞ –ë–∞–ª–∞–Ω—Å: {user_info['balance']:.2f}\nü™ô –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {user_info['total_tokens']}"
        )
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_management(message))


@bot.message_handler(func=lambda message: message.text == "üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def block_user(message):
    if str(message.chat.id) == ADMIN_ID:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        bot.register_next_step_handler(message, block_user_process)


def block_user_process(message):
    user_id = message.text.strip()
    if user_id in users_data:
        blocked_users_data[user_id] = users_data[user_id]
        save_blocked_users()
        del users_data[user_id]
        save_data(USERS_FILE, users_data)
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_management(message))


@bot.message_handler(func=lambda message: message.text == "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def unblock_user(message):
    if str(message.chat.id) == ADMIN_ID:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        bot.register_next_step_handler(message, unblock_user_process)


def unblock_user_process(message):
    user_id = message.text.strip()
    if user_id in blocked_users_data:
        users_data[user_id] = blocked_users_data[user_id]
        del blocked_users_data[user_id]
        save_data(USERS_FILE, users_data)
        save_blocked_users()
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_management(message))


@bot.message_handler(func=lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def list_unblocked_users(message):
    if str(message.chat.id) == ADMIN_ID:
        if blocked_users_data:
            blocked_users_list = "\n".join(blocked_users_data.keys())
            bot.send_message(message.chat.id, f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{blocked_users_list}")
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_management(message))


@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def go_back_from_admin(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard(message.chat.id))

@bot.message_handler(func=lambda message: message.text == "üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def block_users(message):
    if str(message.chat.id) == ADMIN_ID:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        bot.register_next_step_handler(message, block_user)

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_statistics(message):
    if str(message.chat.id) == ADMIN_ID:
        total_users, total_balance = get_stats()
        stats_text = (
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.2f} —Ä—É–±–ª–µ–π"
        )
        bot.send_message(message.chat.id, stats_text)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")

@bot.message_handler(func=lambda message: message.text == "üîí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
def user_management(message):
    if str(message.chat.id) == ADMIN_ID:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
        markup.add(types.KeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"))
        markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")

@bot.message_handler(func=lambda message: message.text == "üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def find_user(message):
    if str(message.chat.id) == ADMIN_ID:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        bot.register_next_step_handler(message, search_user_by_id)

def search_user_by_id(message):
    user_id = message.text.strip()
    user_data = users_data.get(user_id, None)
    if user_data:
        profile_text = (
            f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} —Ä—É–±–ª–µ–π\n"
            f"ü™ô –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {user_data['total_tokens']}\n"
            "üîí –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏–∂–µ."
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{user_id}"))
        markup.add(types.InlineKeyboardButton("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unblock_{user_id}"))
        bot.send_message(message.chat.id, profile_text, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def get_stats():
    total_users = len(users_data)
    total_balance = sum(user['balance'] for user in users_data.values())
    return total_users, total_balance

def block_user(user_id, reason):
    if user_id in users_data:
        blocked_users_data[user_id] = reason
        save_blocked_users()
        del users_data[user_id]
        save_data(USERS_FILE, users_data)
        bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}.")
    else:
        bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def unblock_user(user_id):
    if user_id in blocked_users_data:
        users_data[user_id] = {
            'balance': 0.0,
            'tokens': [],
            'total_tokens': 0,
            'accepted_rules': False
        }
        save_data(USERS_FILE, users_data)
        del blocked_users_data[user_id]
        save_blocked_users()
        bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.")

@bot.message_handler(func=lambda message: message.text == "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
def show_blocked_users(message):
    if str(message.chat.id) == ADMIN_ID:
        if blocked_users_data:
            blocked_list = "\n".join(f"üÜî {user_id} - –ü—Ä–∏—á–∏–Ω–∞: {reason}" for user_id, reason in blocked_users_data.items())
            bot.send_message(message.chat.id, f"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{blocked_list}")
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("block_"))
def block_user_callback(call):
    _, user_id = call.data.split("_")
    bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
    bot.register_next_step_handler(call.message, lambda msg: block_user(user_id, msg.text))

def unblock_user(call):
    user_id = call.data.split("_")[1]
    if user_id in blocked_users_data:
        del blocked_users_data[user_id]
        save_blocked_users()
        bot.send_message(call.message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        log_message(f"#–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞{user_id} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.")
    bot.delete_message(call.message.chat.id, call.message.message_id)

@bot.message_handler(func=lambda message: message.text == "üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def block_users(message):
    if str(message.chat.id) == ADMIN_ID:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        bot.register_next_step_handler(message, block_user)

def block_user(message):
    user_id = message.text.strip()
    if user_id in users_data:
        blocked_users_data[user_id] = users_data[user_id]
        save_blocked_users()
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        log_message(f"#–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞{user_id} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(func=lambda message: message.text == "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def unblock_users(message):
    if str(message.chat.id) == ADMIN_ID:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        bot.register_next_step_handler(message, confirm_unblock_user)

def confirm_unblock_user(message):
    user_id = message.text.strip()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"unblock_{user_id}"))
    markup.add(types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_unblock"))
    bot.send_message(message.chat.id, f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}?", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üó® –†–∞—Å—Å—ã–ª–∫–∞")
def mailing_options(message):
    if str(message.chat.id) == ADMIN_ID:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞ —Å —Ñ–æ—Ç–æ"))
        markup.add(types.KeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞ –±–µ–∑ —Ñ–æ—Ç–æ"))
        markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")


def handle_mailing(message, with_photo=False):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    bot.register_next_step_handler(message, lambda msg: collect_message(msg, with_photo))

def collect_message(message, with_photo):
    user_id = str(message.chat.id)
    text = message.text
    if with_photo:
        bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(message, lambda msg: collect_photo(msg, text))
    else:
        send_mailing(text)

def collect_photo(message, text):
    if message.content_type == 'photo':
        file_info = bot.get_file(message.photo[-1].file_id)
        file = bot.download_file(file_info.file_path)
        with open('temp_photo.jpg', 'wb') as f:
            f.write(file)
        send_mailing(text, photo_path='temp_photo.jpg')
        os.remove('temp_photo.jpg')
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        bot.register_next_step_handler(message, lambda msg: collect_photo(msg, text))

def send_mailing(text, photo_path=None):
    user_ids = load_data(USERS_FILE).keys()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in user_ids:
        try:
            if photo_path:
                with open(photo_path, 'rb') as photo:
                    bot.send_photo(user_id, photo, caption=text)
            else:
                bot.send_message(user_id, text)
            time.sleep(1)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        except Exception as e:
            bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—ã–ª–∫–∞ —Å —Ñ–æ—Ç–æ")
def mailing_with_photo(message):
    if str(message.chat.id) == ADMIN_ID:
        handle_mailing(message, with_photo=True)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")

@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—ã–ª–∫–∞ –±–µ–∑ —Ñ–æ—Ç–æ")
def mailing_without_photo(message):
    if str(message.chat.id) == ADMIN_ID:
        handle_mailing(message, with_photo=False)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")

@bot.message_handler(func=lambda message: message.text == "üÜò –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
def support(message):
    bot.send_message(message.chat.id, f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: {SUPPORT_BOT_LINK}")

@bot.message_handler(func=lambda message: message.text == "üì• –°–∫–∞—á–∞—Ç—å —Ç–æ–∫–µ–Ω—ã")
def download_tokens_handler(message):
    download_tokens()
    with open('working_tokens.txt', 'rb') as file:
        bot.send_document(message.chat.id, file, caption="–§–∞–π–ª —Å —Ä–∞–±–æ—á–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–∫–∞—á–∞–Ω.")


while True:
    try:
        bot.polling(none_stop=True, timeout=60, long_polling_timeout=60)
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞: {e}"
        print(error_message)
        try:
            bot.send_message(ADMIN_ID, error_message)  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        except Exception as send_error:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
        time.sleep(15)
