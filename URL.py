import telebot
import json
import random
import string
import os
import subprocess
from telebot import types

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –≤–∞—à Telegram ID
TOKEN = '7375465921:AAFxiuhZ6YlTTZVcjwKFUhJA7XUPfM9oLyY'
ADMIN_ID = 6578018656

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ò–º—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
JSON_FILE = 'urls.json'
PINNED_FILE = 'pinned.json'
TOPICS_FILE = 'topics.json'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
def generate_id(length=5):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞
def load_data(filename):
    if not os.path.exists(filename):
        return {}
    with open(filename, 'r') as file:
        return json.load(file)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON-—Ñ–∞–π–ª
def save_data(filename, data):
    with open(filename, 'w') as file:
        json.dump(data, file, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def send_latest_database(message):
    with open(JSON_FILE, 'rb') as file:
        bot.send_document(message.chat.id, file)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
def send_summary_before_stop():
    with open(JSON_FILE, 'rb') as file:
        bot.send_document(ADMIN_ID, file, caption="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def restart_bot():
    subprocess.Popen(['python', 'bot.py'])

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_manage = types.KeyboardButton("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL")
    btn_search_manage = types.KeyboardButton("üîç –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ")
    btn_pinned_data = types.KeyboardButton("üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    btn_stats = types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    btn_exit = types.KeyboardButton("üö™ –í—ã—Ö–æ–¥")
    markup.add(btn_manage, btn_search_manage, btn_pinned_data, btn_stats, btn_exit)
    return markup

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda message: True)
def menu_handler(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if message.text == "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL":
        manage_urls(message)
    elif message.text == "üîç –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ":
        search_and_delete(message)
    elif message.text == "üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö":
        pinned_and_database(message)
    elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_statistics(message)
    elif message.text == "üö™ –í—ã—Ö–æ–¥":
        send_latest_database(message)
        bot.send_message(message.chat.id, "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        send_summary_before_stop()
        restart_bot()
    else:
        bot.reply_to(message, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

def manage_urls(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_add = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å URL")
    btn_view = types.KeyboardButton("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å URL")
    btn_view_topics = types.KeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º—ã")
    markup.add(btn_add, btn_view, btn_view_topics)
    msg = bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    bot.register_next_step_handler(msg, handle_manage_urls)

def handle_manage_urls(message):
    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å URL":
        msg = bot.reply_to(message, "üìé –í–≤–µ–¥–∏—Ç–µ URL:")
        bot.register_next_step_handler(msg, process_url)
    elif message.text == "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å URL":
        view_urls(message)
    elif message.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º—ã":
        view_topics(message)
    else:
        bot.reply_to(message, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

def process_url(message):
    url = message.text
    data = load_data(JSON_FILE)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ URL –≤ –±–∞–∑–µ
    for url_id, info in data.items():
        if info['url'] == url:
            response = f"‚ùå –≠—Ç–æ—Ç URL —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ:\n\nID: {url_id}\nURL: {info['url']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}\n–¢–µ–º–∞(—ã): {', '.join(info['topics'])}"
            bot.reply_to(message, response)
            return

    url_id = generate_id()
    msg = bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è URL:")
    bot.register_next_step_handler(msg, process_description, url_id, url)

def process_description(message, url_id, url):
    description = message.text
    msg = bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è URL (–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    bot.register_next_step_handler(msg, process_topics, url_id, url, description)

def process_topics(message, url_id, url, description):
    topics = [topic.strip() for topic in message.text.split(',')]
    save_url(url_id, url, description, topics)
    ask_to_pin(message, url_id, url, description, topics)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è URL
    send_latest_database(message)

def save_url(url_id, url, description, topics):
    data = load_data(JSON_FILE)
    data[url_id] = {"url": url, "description": description, "topics": topics}
    save_data(JSON_FILE, data)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –≤ —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    topics_data = load_data(TOPICS_FILE)
    for topic in topics:
        if topic not in topics_data:
            topics_data[topic] = []
        if url_id not in topics_data[topic]:
            topics_data[topic].append(url_id)
    save_data(TOPICS_FILE, topics_data)

def ask_to_pin(message, url_id, url, description, topics):
    markup = types.InlineKeyboardMarkup()
    btn_pin_yes = types.InlineKeyboardButton("üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å", callback_data=f"pin_{url_id}")
    btn_pin_no = types.InlineKeyboardButton("‚ùå –ù–µ –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å", callback_data=f"no_pin_{url_id}")
    markup.add(btn_pin_yes, btn_pin_no)
    bot.reply_to(message, f"‚úÖ URL –¥–æ–±–∞–≤–ª–µ–Ω:\n\nID: {url_id}\nURL: {url}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–¢–µ–º–∞(—ã): {', '.join(topics)}\n–ó–∞–∫—Ä–µ–ø–∏—Ç—å?", reply_markup=markup)

def search_and_delete(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_search = types.KeyboardButton("üîç –ü–æ–∏—Å–∫ URL/ID")
    btn_search_topics = types.KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–∞–º")
    btn_delete = types.KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å URL")
    btn_unpin = types.KeyboardButton("üîì –û—Ç–∫—Ä–µ–ø–∏—Ç—å URL")
    markup.add(btn_search, btn_search_topics, btn_delete, btn_unpin)
    msg = bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    bot.register_next_step_handler(msg, handle_search_and_delete)

def handle_search_and_delete(message):
    if message.text == "üîç –ü–æ–∏—Å–∫ URL/ID":
        msg = bot.reply_to(message, "üîç –í–≤–µ–¥–∏—Ç–µ URL –∏–ª–∏ ID –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        bot.register_next_step_handler(msg, process_search)
    elif message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–∞–º":
        msg = bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        bot.register_next_step_handler(msg, process_search_topics)
    elif message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å URL":
        msg = bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ ID URL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_deletion)
    elif message.text == "üîì –û—Ç–∫—Ä–µ–ø–∏—Ç—å URL":
        view_pinned_for_unpin(message)
    else:
        bot.reply_to(message, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

def pinned_and_database(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn_pinned = types.KeyboardButton("üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ URL")
    btn_download = types.KeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    markup.add(btn_pinned, btn_download)
    msg = bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    bot.register_next_step_handler(msg, handle_pinned_and_database)

def handle_pinned_and_database(message):
    if message.text == "üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ URL":
        view_pinned(message)
    elif message.text == "üì• –°–∫–∞—á–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö":
        send_latest_database(message)
    else:
        bot.reply_to(message, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

def view_pinned(message):
    pinned_data = load_data(PINNED_FILE)
    if not pinned_data:
        bot.reply_to(message, "üìå –ù–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö URL.")
        return

    response = "\n\n".join([f"ID: {url_id}\nURL: {info['url']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}" for url_id, info in pinned_data.items()])

    markup = types.InlineKeyboardMarkup()
    for url_id in pinned_data:
        btn_unpin = types.InlineKeyboardButton(f"üîì –û—Ç–∫—Ä–µ–ø–∏—Ç—å ID {url_id}", callback_data=f"unpin_{url_id}")
        markup.add(btn_unpin)

    bot.reply_to(message, response, reply_markup=markup)

def view_pinned_for_unpin(message):
    pinned_data = load_data(PINNED_FILE)
    if not pinned_data:
        bot.reply_to(message, "üìå –ù–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö URL.")
        return

    response = "\n\n".join([f"ID: {url_id}\nURL: {info['url']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}" for url_id, info in pinned_data.items()])

    markup = types.InlineKeyboardMarkup()
    for url_id in pinned_data:
        btn_unpin = types.InlineKeyboardButton(f"üîì –û—Ç–∫—Ä–µ–ø–∏—Ç—å ID {url_id}", callback_data=f"unpin_{url_id}")
        markup.add(btn_unpin)

    bot.reply_to(message, response, reply_markup=markup)

def view_urls(message):
    data = load_data(JSON_FILE)
    if not data:
        bot.reply_to(message, "üìÑ –ù–µ—Ç URL –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    response = "\n\n".join([f"ID: {url_id}\nURL: {info['url']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}" for url_id, info in data.items()])
    bot.reply_to(message, response)

def view_topics(message):
    topics_data = load_data(TOPICS_FILE)
    if not topics_data:
        bot.reply_to(message, "üìã –ù–µ—Ç —Ç–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    response = "\n\n".join([f"–¢–µ–º–∞: {topic}\nURL-—ã: {', '.join(urls)}" for topic, urls in topics_data.items()])
    bot.reply_to(message, response)

def process_search(message):
    search_term = message.text
    data = load_data(JSON_FILE)
    result = {url_id: info for url_id, info in data.items() if search_term in url_id or search_term in info['url']}
    
    if not result:
        bot.reply_to(message, "üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    response = "\n\n".join([f"ID: {url_id}\nURL: {info['url']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}" for url_id, info in result.items()])
    bot.reply_to(message, response)

def process_search_topics(message):
    topic = message.text
    topics_data = load_data(TOPICS_FILE)
    if topic not in topics_data:
        bot.reply_to(message, "üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    result = topics_data[topic]
    if not result:
        bot.reply_to(message, "üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    data = load_data(JSON_FILE)
    response = "\n\n".join([f"ID: {url_id}\nURL: {data[url_id]['url']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {data[url_id]['description']}" for url_id in result])
    bot.reply_to(message, response)

def process_deletion(message):
    url_id = message.text
    data = load_data(JSON_FILE)
    if url_id not in data:
        bot.reply_to(message, "‚ùå URL —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    del data[url_id]
    save_data(JSON_FILE, data)

    topics_data = load_data(TOPICS_FILE)
    for topic in topics_data:
        if url_id in topics_data[topic]:
            topics_data[topic].remove(url_id)
    save_data(TOPICS_FILE, topics_data)

    bot.reply_to(message, "‚úÖ URL —É–¥–∞–ª–µ–Ω.")

def process_unpin(message):
    url_id = message.text
    pinned_data = load_data(PINNED_FILE)
    if url_id not in pinned_data:
        bot.reply_to(message, "‚ùå URL —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    del pinned_data[url_id]
    save_data(PINNED_FILE, pinned_data)

    bot.reply_to(message, "‚úÖ URL –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data.startswith("pin_"):
        url_id = call.data.split("_")[1]
        pin_url(call.message, url_id)
    elif call.data.startswith("unpin_"):
        url_id = call.data.split("_")[1]
        unpin_url(call.message, url_id)
    
def pin_url(message, url_id):
    data = load_data(JSON_FILE)
    if url_id not in data:
        bot.answer_callback_query(callback_query_id=message.id, text="‚ùå URL —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    pinned_data = load_data(PINNED_FILE)
    pinned_data[url_id] = data[url_id]
    save_data(PINNED_FILE, pinned_data)

    bot.answer_callback_query(callback_query_id=message.id, text="üìå URL –∑–∞–∫—Ä–µ–ø–ª–µ–Ω.")

def unpin_url(message, url_id):
    pinned_data = load_data(PINNED_FILE)
    if url_id not in pinned_data:
        bot.answer_callback_query(callback_query_id=message.id, text="‚ùå URL —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    del pinned_data[url_id]
    save_data(PINNED_FILE, pinned_data)

    bot.answer_callback_query(callback_query_id=message.id, text="üîì URL –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω.")

def show_statistics(message):
    data = load_data(JSON_FILE)
    pinned_data = load_data(PINNED_FILE)
    topics_data = load_data(TOPICS_FILE)

    total_urls = len(data)
    total_pinned = len(pinned_data)
    total_topics = len(topics_data)

    response = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üîó –í—Å–µ–≥–æ URL: {total_urls}\n"
        f"üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö URL: {total_pinned}\n"
        f"üìö –¢–µ–º: {total_topics}"
    )
    bot.reply_to(message, response)


def send_summary_before_stop():
    if os.path.exists(JSON_FILE):
        with open(JSON_FILE, 'rb') as file:
            bot.send_document(ADMIN_ID, file, caption="–ü–æ—Å–ª–µ–¥–Ω—è—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –±–æ—Ç–∞.")

def restart_bot():
    subprocess.Popen(['python3', os.path.realpath(__file__)])
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
