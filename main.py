import telebot
import json
import os
import random

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –≤–∞—à Telegram ID
bot = telebot.TeleBot("7264644656:AAEXeOL9SV0W-ykoOicic6Ec-9uaDHgg-6k")
admin_id = 6578018656

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
accounts_file = 'accounts.json'
gift_accounts_file = 'gift_accounts.json'

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
for file in [accounts_file, gift_accounts_file]:
    if not os.path.exists(file):
        with open(file, 'w') as f:
            json.dump({}, f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(message):
    return message.from_user.id == admin_id

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    if not is_admin(message):
        bot.reply_to(message, "‚õîÔ∏è –í–∞–º –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã")
    markup.row("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–ø–∫–∏")
    markup.row("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    markup.row("üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
    bot.send_message(message.chat.id, "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if not is_admin(message):
        bot.reply_to(message, "‚õîÔ∏è –í–∞–º –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    
    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã":
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å? (–æ—Ç 1 –¥–æ 100)")
        bot.register_next_step_handler(message, get_accounts_count)
    elif message.text == "üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–ø–∫–∏":
        show_folders(message)
    elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_statistics(message)
    elif message.text == "üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã":
        handle_gift_accounts(message)
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        start(message)
    else:
        bot.send_message(message.chat.id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

def get_accounts_count(message):
    try:
        count = int(message.text)
        if count < 1 or count > 100:
            bot.send_message(message.chat.id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
            bot.register_next_step_handler(message, get_accounts_count)
            return
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫")
        markup.row("‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–∞—Ä–æ–∫")
        markup.row("üîô –ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üéÅ –î–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–∞—Ä–æ–∫? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        bot.register_next_step_handler(message, add_gift_option, count)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, get_accounts_count)


def add_gift_option(message, count):
    if message.text == "üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫":
        bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
        bot.register_next_step_handler(message, get_login, count, True, [])
    elif message.text == "‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–∞—Ä–æ–∫":
        bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
        bot.register_next_step_handler(message, get_login, count, False, [])
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        start(message)
    else:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        add_gift_option(message, count)


def get_login(message, count, has_gift, accounts):
    login = message.text
    bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
    bot.register_next_step_handler(message, get_password, count, has_gift, accounts, login)

def get_password(message, count, has_gift, accounts, login):
    password = message.text
    accounts.append({'login': login, 'password': password})

    if len(accounts) < count:
        bot.send_message(message.chat.id, f"üîë –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {len(accounts) + 1}:")
        bot.register_next_step_handler(message, get_login, count, has_gift, accounts)
    else:
        if has_gift:
            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.row("üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            markup.row("üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞")
            markup.row("üîô –ù–∞–∑–∞–¥")
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–∞—Ä–∫–∞:", reply_markup=markup)
            bot.register_next_step_handler(message, handle_gift_type, accounts)
        else:
            save_accounts(message, accounts, False)


def handle_gift_type(message, accounts):
    if message.text == "üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö":
        add_gift_account_from_db(message, accounts)
    elif message.text == "üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞":
        bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:")
        bot.register_next_step_handler(message, get_gift_description, accounts)
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        start(message)
    else:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        handle_gift_type(message, accounts)




def add_gift_account_from_db(message, accounts):
    with open(gift_accounts_file, 'r') as f:
        gift_data = json.load(f)
    
    if not gift_data:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        handle_gift_type(message, accounts)
        return
    
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for gift_id in gift_data.keys():
        markup.add(f"üìú –î–æ–±–∞–≤–∏—Ç—å {gift_id}")
    markup.row("üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, add_gift_account_to_task, gift_data, accounts)

def add_gift_account_to_task(message, gift_data, accounts):
    gift_id = message.text.split()[-1]
    if gift_id in gift_data:
        gift_account = gift_data[gift_id]
        accounts.append(gift_account)
        with open(gift_accounts_file, 'r+') as f:
            gift_data = json.load(f)
            del gift_data[gift_id]
            f.seek(0)
            f.truncate()
            json.dump(gift_data, f, indent=4)
        
        save_accounts(message, accounts, True, gift_type='account')
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        handle_gift_type(message, accounts)



def get_gift_description(message, accounts):
    description = message.text
    accounts.append({'gift_description': description})
    save_accounts(message, accounts, True)

def save_accounts(message, accounts, has_gift, gift_type=None):
    account_id = str(random.randint(1000, 9999))
    data = {
        'accounts': accounts,
        'gift_description': None
    }

    if has_gift:
        if gift_type == 'description':
            data['gift_description'] = accounts[-1].get('gift_description')
        elif gift_type == 'account':
            gift_account = accounts[-1]
            data['gift_description'] = f'–õ–æ–≥–∏–Ω: {gift_account.get("login", "–ù–µ —É–∫–∞–∑–∞–Ω")}, –ü–∞—Ä–æ–ª—å: {gift_account.get("password", "–ù–µ —É–∫–∞–∑–∞–Ω")}'

    with open(accounts_file, 'r+') as f:
        existing_data = json.load(f)
        existing_data[account_id] = data
        f.seek(0)
        f.truncate()
        json.dump(existing_data, f, indent=4)

    bot.send_message(message.chat.id, f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å ID: {account_id} üéâ")
    start(message)


def show_folders(message):
    with open(accounts_file, 'r') as f:
        data = json.load(f)
    
    if not data:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫.")
        start(message)
        return
    
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for folder_id in data.keys():
        markup.add(f"üìÇ –ü–∞–ø–∫–∞ {folder_id}")
    markup.row("üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:", reply_markup=markup)
    bot.register_next_step_handler(message, view_folder)

def view_folder(message):
    folder_id = message.text.split()[-1]
    with open(accounts_file, 'r') as f:
        data = json.load(f)
    
    if folder_id not in data:
        bot.send_message(message.chat.id, "‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        start(message)
        return
    
    folder_data = data[folder_id]
    accounts = folder_data.get('accounts', [])
    gift_description = folder_data.get('gift_description', None)
    
    text = ""

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    if accounts:
        text += "\n".join([f"–õ–æ–≥–∏–Ω: {acc.get('login', '–ù–µ —É–∫–∞–∑–∞–Ω')}, –ü–∞—Ä–æ–ª—å: {acc.get('password', '–ù–µ —É–∫–∞–∑–∞–Ω')}" for acc in accounts])

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if gift_description:
        text += f"\nüéÅ –ü–æ–¥–∞—Ä–æ–∫: {gift_description}"
    
    if not accounts and not gift_description:
        text = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ."

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É")
    markup.row("üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, f"üóÇÔ∏è –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∞–ø–∫–∏ {folder_id}:\n{text}", reply_markup=markup)
    bot.register_next_step_handler(message, handle_folder_options, folder_id)


def handle_folder_options(message, folder_id):
    if message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É":
        with open(accounts_file, 'r+') as f:
            data = json.load(f)
            del data[folder_id]
            f.seek(0)
            f.truncate()
            json.dump(data, f, indent=4)
        bot.send_message(message.chat.id, "‚úÖ –ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        show_folders(message)
    else:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        handle_folder_options(message, folder_id)

def show_statistics(message):
    with open(accounts_file, 'r') as f:
        data = json.load(f)
    
    total_urls = sum(len(folder.get('accounts', [])) for folder in data.values())
    total_topics = len(data)
    
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüìÅ –ü–∞–ø–æ–∫: {total_topics}\nüîó –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {total_urls}"
    bot.send_message(message.chat.id, text)
    start(message)

def handle_gift_accounts(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row("üéÅ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫")
    markup.row("üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
    markup.row("üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:", reply_markup=markup)
    bot.register_next_step_handler(message, process_gift_account_action)

def process_gift_account_action(message):
    if message.text == "üéÅ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫":
        bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
        bot.register_next_step_handler(message, add_gift_login)
    elif message.text == "üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã":
        view_gift_accounts(message)
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        start(message)
    else:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        handle_gift_accounts(message)

def add_gift_login(message):
    login = message.text
    bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
    bot.register_next_step_handler(message, add_gift_password, login)

def add_gift_password(message, login):
    password = message.text
    gift_id = str(random.randint(1000, 9999))
    gift_account = {'login': login, 'password': password}
    
    with open(gift_accounts_file, 'r+') as f:
        gift_data = json.load(f)
        gift_data[gift_id] = gift_account
        f.seek(0)
        f.truncate()
        json.dump(gift_data, f, indent=4)
    
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: {gift_id} üéâ")
    handle_gift_accounts(message)

def view_gift_accounts(message):
    with open(gift_accounts_file, 'r') as f:
        data = json.load(f)
    
    if not data:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        handle_gift_accounts(message)
        return
    
    text = "\n".join([f"üìú ID: {gift_id}, –õ–æ–≥–∏–Ω: {info.get('login', '–ù–µ —É–∫–∞–∑–∞–Ω')}" for gift_id, info in data.items()])
    bot.send_message(message.chat.id, f"üìú –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n{text}")
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫")
    markup.row("üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_gift_action)

def handle_gift_action(message):
    if message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫":
        bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, delete_gift_account)
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        handle_gift_accounts(message)
    else:
        bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        handle_gift_action(message)

def delete_gift_account(message):
    gift_id = message.text
    with open(gift_accounts_file, 'r+') as f:
        gift_data = json.load(f)
        if gift_id in gift_data:
            del gift_data[gift_id]
            f.seek(0)
            f.truncate()
            json.dump(gift_data, f, indent=4)
            bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å ID {gift_id} —É–¥–∞–ª–µ–Ω.")
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    handle_gift_accounts(message)

while True:
    try:
        bot.polling(none_stop=True, timeout=60, long_polling_timeout=60)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        time.sleep(15) 
