import os
import json
import subprocess
import telebot
from telebot import types

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –≤–∞—à Telegram ID
TOKEN = '7375465921:AAFxiuhZ6YlTTZVcjwKFUhJA7XUPfM9oLyY'
ADMIN_ID = 6578018656

# –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–æ—Ç–æ–≤
BOT_DIRECTORIES = [
    '/data/data/com.termux/files/home/tgbotacs/code',
    '/data/data/com.termux/files/home/tgbotacs'
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_run_code = types.KeyboardButton("üìù –ó–∞–ø—É—Å—Ç–∏—Ç—å Python —Ñ–∞–π–ª")
    btn_manage_bots = types.KeyboardButton("üíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏")
    btn_execute_command = types.KeyboardButton("üíª –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
    markup.add(btn_run_code, btn_manage_bots, btn_execute_command)
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏
def manage_bots_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_add_bot = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞")
    btn_remove_bot = types.KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞")
    btn_start_all_bots = types.KeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤")
    btn_stop_all_bots = types.KeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤")
    markup.add(btn_add_bot, btn_remove_bot, btn_start_all_bots, btn_stop_all_bots)
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
def find_file_by_name(filename):
    for directory in BOT_DIRECTORIES:
        potential_path = os.path.join(directory, filename)
        if os.path.isfile(potential_path):
            return potential_path, directory
    return None, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞
def process_add_bot(message):
    bot_name = message.text.strip()
    if not bot_name:
        bot.reply_to(message, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    bot_path, directory = find_file_by_name(bot_name + '.py')
    if bot_path is None:
        bot.reply_to(message, f"‚ùå –ë–æ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö.\n–ò—â–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö:\n{', '.join(BOT_DIRECTORIES)}")
        return

    bots = load_data('bots.json')
    if bot_name in bots:
        bot.reply_to(message, "‚ùå –ë–æ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    bots[bot_name] = {'path': bot_path, 'status': 'stopped'}
    save_data('bots.json', bots)
    bot.reply_to(message, f"‚úÖ –ë–æ—Ç '{bot_name}' –¥–æ–±–∞–≤–ª–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda message: True)
def menu_handler(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if message.text == "üìù –ó–∞–ø—É—Å—Ç–∏—Ç—å Python —Ñ–∞–π–ª":
        msg = bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Python —Ñ–∞–π–ª–∞:")
        bot.register_next_step_handler(msg, process_run_python)

    elif message.text == "üíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏":
        bot.reply_to(message, "üíª –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=manage_bots_menu())

    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞":
        msg = bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: bot_name):")
        bot.register_next_step_handler(msg, process_add_bot)

    elif message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞":
        msg = bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_remove_bot)

    elif message.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤":
        start_all_bots(message)

    elif message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤":
        stop_all_bots(message)

    elif message.text == "üíª –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É":
        msg = bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_execute_command)

    else:
        bot.reply_to(message, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Python —Ñ–∞–π–ª–∞
def process_run_python(message):
    command = message.text.strip()
    bot_path, _ = find_file_by_name(command)
    if bot_path is None:
        bot.reply_to(message, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    result = execute_command(f"python {bot_path}")
    if "Error" in result:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:\n{result}")
    else:
        bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:\n{result}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
def process_execute_command(message):
    command = message.text.strip()
    result = execute_command(command)
    if "Error" in result:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:\n{result}")
    else:
        bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:\n{result}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞
def process_remove_bot(message):
    bot_name = message.text.strip()
    bots = load_data('bots.json')
    if bot_name in bots:
        del bots[bot_name]
        save_data('bots.json', bots)
        bot.reply_to(message, f"‚úÖ –ë–æ—Ç '{bot_name}' —É–¥–∞–ª–µ–Ω.")
    else:
        bot.reply_to(message, "‚ùå –ë–æ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
def start_all_bots(message):
    bots = load_data('bots.json')
    results = []
    for bot_name, bot_info in bots.items():
        if isinstance(bot_info, dict):
            if bot_info.get('status') == 'running':
                results.append(f"–ë–æ—Ç '{bot_name}' —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
                continue

            try:
                subprocess.Popen(['python', bot_info['path']], cwd=os.path.dirname(bot_info['path']))
                bots[bot_name]['status'] = 'running'
                results.append(f"–ë–æ—Ç '{bot_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
            except Exception as e:
                results.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å '{bot_name}': {str(e)}")
        else:
            results.append(f"–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –±–æ—Ç–µ '{bot_name}' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")

    save_data('bots.json', bots)
    bot.reply_to(message, "\n".join(results))

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
def stop_all_bots(message):
    bots = load_data('bots.json')
    results = []
    for bot_name, bot_info in bots.items():
        if isinstance(bot_info, dict):
            if bot_info.get('status') == 'stopped':
                results.append(f"–ë–æ—Ç '{bot_name}' —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                continue

            try:
                # –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                # –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
                bots[bot_name]['status'] = 'stopped'
                results.append(f"–ë–æ—Ç '{bot_name}' —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                results.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å '{bot_name}': {str(e)}")
        else:
            results.append(f"–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –±–æ—Ç–µ '{bot_name}' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")

    save_data('bots.json', bots)
    bot.reply_to(message, "\n".join(results))

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_data(filename):
    if not os.path.exists(filename):
        return {}
    with open(filename, 'r') as file:
        try:
            return json.load(file)
        except json.JSONDecodeError:
            return {}  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª
def save_data(filename, data):
    with open(filename, 'w') as file:
        json.dump(data, file, indent=4)

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
def execute_command(command):
    try:
        result = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT, text=True)
        return result
    except subprocess.CalledProcessError as e:
        return f"–û—à–∏–±–∫–∞: {e.output}"

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.polling(none_stop=True, timeout=60)
