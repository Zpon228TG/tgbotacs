import subprocess
import os
import json
import telebot
from telebot import types

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –≤–∞—à Telegram ID
TOKEN = '7375465921:AAFxiuhZ6YlTTZVcjwKFUhJA7XUPfM9oLyY'
ADMIN_ID = 6578018656

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –∏—â—É—Ç—Å—è –±–æ—Ç—ã
BOT_DIRECTORY = '/data/data/com.termux/files/home/tgbotacs/'

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_add_bot = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞")
    btn_run_python = types.KeyboardButton("üìù –ó–∞–ø—É—Å—Ç–∏—Ç—å Python —Ñ–∞–π–ª")
    btn_run_command = types.KeyboardButton("üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
    btn_start_all = types.KeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤")
    btn_stop_all = types.KeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤")
    markup.add(btn_add_bot, btn_run_python, btn_run_command, btn_start_all, btn_stop_all)
    return markup

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda message: True)
def menu_handler(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞":
        bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –ø—É—Ç—å –∫ –µ–≥–æ —Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'bot_name /path/to/bot.py'):")
        bot.register_next_step_handler(message, add_bot)
    elif message.text == "üìù –ó–∞–ø—É—Å—Ç–∏—Ç—å Python —Ñ–∞–π–ª":
        bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Python —Ñ–∞–π–ª–∞:")
        bot.register_next_step_handler(message, run_python_file)
    elif message.text == "üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É":
        bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, execute_command)
    elif message.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤":
        start_all_bots(message)
    elif message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤":
        stop_all_bots(message)
    else:
        bot.reply_to(message, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

def add_bot(message):
    try:
        bot_name, bot_path = message.text.split(' ', 1)
        full_path = os.path.join(BOT_DIRECTORY, bot_path)
        if not os.path.isfile(full_path):
            bot.reply_to(message, f"‚ùå –§–∞–π–ª '{full_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        bots = load_data('bots.json')
        if bot_name in bots:
            bot.reply_to(message, "‚ùå –ë–æ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
        
        bots[bot_name] = {
            'path': full_path,
            'status': 'stopped'
        }
        save_data('bots.json', bots)
        bot.reply_to(message, f"‚úÖ –ë–æ—Ç '{bot_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ_–±–æ—Ç–∞ /–ø—É—Ç—å/–∫/–±–æ—Ç—É.py")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

def run_python_file(message):
    file_path = os.path.join(BOT_DIRECTORY, message.text)
    if not os.path.isfile(file_path):
        bot.reply_to(message, f"‚ùå –§–∞–π–ª '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    try:
        result = subprocess.run(['python', file_path], capture_output=True, text=True)
        if result.returncode == 0:
            bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:\n{result.stdout}")
        else:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{result.stderr}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

def execute_command(message):
    command = message.text
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            bot.reply_to(message, f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:\n{result.stdout}")
        else:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n{result.stderr}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

def start_all_bots(message):
    bots = load_data('bots.json')
    if not bots:
        bot.reply_to(message, "üîç –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
        return
    
    for bot_name, bot_info in bots.items():
        if 'path' in bot_info:
            bot_path = bot_info['path']
            if os.path.isfile(bot_path):
                try:
                    subprocess.Popen(['python', bot_path])
                    bot_info['status'] = 'running'
                    save_data('bots.json', bots)
                except Exception as e:
                    bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ {bot_name}: {e}")
            else:
                bot.reply_to(message, f"‚ùå –ë–æ—Ç {bot_name} —Å –ø—É—Ç–µ–º {bot_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            bot.reply_to(message, f"‚ùå –î–∞–Ω–Ω—ã–µ –æ –±–æ—Ç–µ {bot_name} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")

    bot.reply_to(message, "üöÄ –í—Å–µ –±–æ—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã.")

def stop_all_bots(message):
    bots = load_data('bots.json')
    for bot_name, bot_info in bots.items():
        if bot_info.get('status') == 'running':
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
            bot_info['status'] = 'stopped'
            save_data('bots.json', bots)
            bot.reply_to(message, f"üõë –ë–æ—Ç {bot_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    bot.reply_to(message, "üõë –í—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

def load_data(filename):
    if not os.path.exists(filename):
        return {}
    with open(filename, 'r') as file:
        try:
            return json.load(file)
        except json.JSONDecodeError:
            return {}  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

def save_data(filename, data):
    with open(filename, 'w') as file:
        json.dump(data, file, indent=4)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.polling(none_stop=True, timeout=60)
