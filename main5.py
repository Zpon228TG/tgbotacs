import subprocess
import os
import json
import signal
import telebot
from telebot import types

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –≤–∞—à Telegram ID
TOKEN = '7242149578:AAGoI3qzv5VjL4pAnvqvSjH-WjXbRbFYKe0'
ADMIN_ID = 6578018656

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –∏—â—É—Ç—Å—è –±–æ—Ç—ã
BOT_DIRECTORY = '/data/data/com.termux/files/home/tgbotacs/'

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_add_bot = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞")
    btn_run_python = types.KeyboardButton("üìù –ó–∞–ø—É—Å—Ç–∏—Ç—å Python —Ñ–∞–π–ª")
    btn_run_command = types.KeyboardButton("üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
    btn_start_all = types.KeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤")
    btn_stop_all = types.KeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤")
    btn_stop_bot = types.KeyboardButton("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")
    btn_running_bots = types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤")
    markup.add(btn_add_bot, btn_run_python, btn_run_command, btn_start_all, btn_stop_all)
    markup.add(btn_stop_bot, btn_running_bots)
    return markup

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda message: True)
def menu_handler(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞":
        bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞:")
        bot.register_next_step_handler(message, add_bot)
    elif message.text == "üìù –ó–∞–ø—É—Å—Ç–∏—Ç—å Python —Ñ–∞–π–ª":
        bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Python —Ñ–∞–π–ª–∞:")
        bot.register_next_step_handler(message, run_python_file)
    elif message.text == "üîß –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É":
        bot.reply_to(message, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, execute_command)
    elif message.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤":
        start_all_bots(message)
    elif message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤":
        stop_all_bots(message)
    elif message.text == "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞":
        list_running_bots(message)
    elif message.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤":
        show_running_bots(message)
    else:
        bot.reply_to(message, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

def add_bot(message):
    bot_name = message.text.strip()
    if not bot_name:
        bot.reply_to(message, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    full_path = os.path.join(BOT_DIRECTORY, f'{bot_name}.py')
    if not os.path.isfile(full_path):
        bot.reply_to(message, f"‚ùå –§–∞–π–ª '{full_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    bots = load_data('bots.json')
    if bot_name in bots:
        bot.reply_to(message, "‚ùå –ë–æ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    
    bots[bot_name] = {
        'path': full_path,
        'status': 'stopped',
        'pid': None  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ PID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    }
    save_data('bots.json', bots)
    bot.reply_to(message, f"‚úÖ –ë–æ—Ç '{bot_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")

def run_python_file(message):
    file_path = os.path.join(BOT_DIRECTORY, message.text.strip())
    if not os.path.isfile(file_path):
        bot.reply_to(message, f"‚ùå –§–∞–π–ª '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    try:
        result = subprocess.run(['python', file_path], capture_output=True, text=True)
        if result.returncode == 0:
            bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:\n{result.stdout}")
        else:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{result.stderr}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

def execute_command(message):
    command = message.text.strip()
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            bot.reply_to(message, f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:\n{result.stdout}")
        else:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n{result.stderr}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")

def start_all_bots(message):
    bots = load_data('bots.json')
    if not bots:
        bot.reply_to(message, "üîç –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
        return

    for bot_name, bot_info in bots.items():
        if isinstance(bot_info, dict):  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ bot_info - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            bot_path = bot_info.get('path')
            if bot_path and os.path.isfile(bot_path):
                try:
                    process = subprocess.Popen(['python', bot_path])
                    bot_info['status'] = 'running'
                    bot_info['pid'] = process.pid  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PID –ø—Ä–æ—Ü–µ—Å—Å–∞
                    save_data('bots.json', bots)
                except Exception as e:
                    bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ {bot_name}: {e}")
            else:
                bot.reply_to(message, f"‚ùå –ë–æ—Ç {bot_name} —Å –ø—É—Ç–µ–º {bot_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –±–æ—Ç–µ {bot_name} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")

    bot.reply_to(message, "üöÄ –í—Å–µ –±–æ—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã.")

def stop_all_bots(message):
    bots = load_data('bots.json')
    if not bots:
        bot.reply_to(message, "üîç –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        return

    for bot_name, bot_info in bots.items():
        if isinstance(bot_info, dict) and bot_info.get('status') == 'running':
            pid = bot_info.get('pid')
            if pid:
                try:
                    os.kill(pid, signal.SIGTERM)  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID
                    bot_info['status'] = 'stopped'
                    bot_info['pid'] = None
                    save_data('bots.json', bots)
                    bot.reply_to(message, f"üõë –ë–æ—Ç {bot_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                except Exception as e:
                    bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞ {bot_name}: {e}")
            else:
                bot.reply_to(message, f"‚ùå PID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_name}.")
        else:
            bot.reply_to(message, f"‚ùå –ë–æ—Ç {bot_name} –Ω–µ –∑–∞–ø—É—â–µ–Ω.")

    bot.reply_to(message, "üõë –í—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

def list_running_bots(message):
    bots = load_data('bots.json')
    running_bots = {name: info for name, info in bots.items() if info.get('status') == 'running'}

    if not running_bots:
        bot.reply_to(message, "üîç –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤.")
        return

    markup = types.InlineKeyboardMarkup()
    for bot_name in running_bots.keys():
        markup.add(types.InlineKeyboardButton(text=bot_name, callback_data=f'stop_{bot_name}'))
    
    bot.reply_to(message, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('stop_'))
def stop_selected_bot(call):
    bot_name = call.data[len('stop_'):]
    bots = load_data('bots.json')

    if bot_name in bots and bots[bot_name].get('status') == 'running':
        pid = bots[bot_name].get('pid')
        if pid:
            try:
                os.kill(pid, signal.SIGTERM)
                bots[bot_name]['status'] = 'stopped'
                bots[bot_name]['pid'] = None
                save_data('bots.json', bots)
                bot.answer_callback_query(call.id, f"üõë –ë–æ—Ç {bot_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞ {bot_name}: {e}")
        else:
            bot.answer_callback_query(call.id, f"‚ùå PID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±–æ—Ç–∞ {bot_name}.")
    else:
        bot.answer_callback_query(call.id, f"‚ùå –ë–æ—Ç {bot_name} –Ω–µ –∑–∞–ø—É—â–µ–Ω.")

def show_running_bots(message):
    bots = load_data('bots.json')
    running_bots = {name: info for name, info in bots.items() if info.get('status') == 'running'}

    if not running_bots:
        bot.reply_to(message, "üîç –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤.")
        return

    bot_list = '\n'.join(running_bots.keys())
    bot.reply_to(message, f"üìã –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –±–æ—Ç—ã:\n{bot_list}")

def load_data(filename):
    try:
        with open(filename, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(filename, data):
    with open(filename, 'w') as f:
        json.dump(data, f, indent=4)

bot.polling(none_stop=True)
