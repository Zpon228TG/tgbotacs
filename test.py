import telebot
from telebot import types
import json
import os

API_TOKEN = '7024190964:AAEzgPV9RvoJMbBBShBvSo-K5yEIsq08D4I'
CHANNEL_ID = '@GameDevAssetsHub'
SUPPORT_BOT_LINK = 'https://t.me/your_support_bot'
TOKENS_FILE = 'tokens.json'
USERS_FILE = 'users.json'
ADMIN_ID = '6578018656'  # –í–∞—à ID

bot = telebot.TeleBot(API_TOKEN)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def load_data(file_name):
    if os.path.exists(file_name):
        with open(file_name, 'r') as file:
            return json.load(file)
    else:
        return {}

def save_data(file_name, data):
    with open(file_name, 'w') as file:
        json.dump(data, file, indent=4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
tokens_data = load_data(TOKENS_FILE)
users_data = load_data(USERS_FILE)

def add_user(user_id):
    if user_id not in users_data:
        users_data[user_id] = {
            'balance': 0.0,
            'tokens': [],
            'hold': 0.0,
            'total_tokens': 0
        }
        save_data(USERS_FILE, users_data)

def add_tokens(user_id, tokens):
    unique_tokens = [token for token in tokens if token not in tokens_data]
    if unique_tokens:
        users_data[user_id]['tokens'].extend(unique_tokens)
        users_data[user_id]['hold'] += 0.01 * len(unique_tokens)
        users_data[user_id]['total_tokens'] += len(unique_tokens)
        tokens_data.update({token: user_id for token in unique_tokens})
        save_data(USERS_FILE, users_data)
        save_data(TOKENS_FILE, tokens_data)
    return len(unique_tokens)

def approve_tokens(user_id, count):
    users_data[user_id]['balance'] += 0.01 * count
    users_data[user_id]['hold'] -= 0.01 * count
    users_data[user_id]['tokens'] = []
    save_data(USERS_FILE, users_data)

def reject_tokens(user_id, count):
    users_data[user_id]['hold'] -= 0.01 * count
    users_data[user_id]['tokens'] = []
    save_data(USERS_FILE, users_data)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
    markup.add("üíº –ü—Ä–æ—Ñ–∏–ª—å")
    markup.add("üÜò –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    if user_id == ADMIN_ID:
        markup.add("üîß –ê–¥–º–∏–Ω–∫–∞")
    return markup

def back_to_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
    markup.add("üíº –ü—Ä–æ—Ñ–∏–ª—å")
    markup.add("üÜò –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    return markup

def back_to_admin_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîß –ê–¥–º–∏–Ω–∫–∞")
    markup.add("üîô –ù–∞–∑–∞–¥")
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.chat.id)
    add_user(user_id)
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard(user_id))

@bot.message_handler(func=lambda message: message.text == "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
def upload_tokens(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ß–µ—Ä–µ–∑ —Ñ–∞–π–ª", "–ß–µ—Ä–µ–∑ –±–æ—Ç–∞")
    markup.add("üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ß–µ—Ä–µ–∑ —Ñ–∞–π–ª")
def upload_tokens_file(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏.")

@bot.message_handler(content_types=['document'])
def handle_docs(message):
    if message.document.mime_type == 'text/plain':
        user_id = str(message.chat.id)
        file_info = bot.get_file(message.document.file_id)
        file = bot.download_file(file_info.file_path)
        tokens = file.decode('utf-8').splitlines()
        count = add_tokens(user_id, tokens)
        if count > 0:
            bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {count} —Ç–æ–∫–µ–Ω–æ–≤. üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        else:
            bot.send_message(message.chat.id, "–í—Å–µ —Ç–æ–∫–µ–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt).")

@bot.message_handler(func=lambda message: message.text == "–ß–µ—Ä–µ–∑ –±–æ—Ç–∞")
def upload_tokens_via_bot(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –ø–æ –æ–¥–Ω–æ–º—É (–º–∞–∫—Å–∏–º—É–º 15). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
    bot.register_next_step_handler(message, collect_tokens, [])

def collect_tokens(message, tokens):
    if message.text.lower() == '–≥–æ—Ç–æ–≤–æ' or len(tokens) == 15:
        if tokens:
            count = add_tokens(str(message.chat.id), tokens)
            if count > 0:
                bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {count} —Ç–æ–∫–µ–Ω–æ–≤. üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            else:
                bot.send_message(message.chat.id, "–í—Å–µ —Ç–æ–∫–µ–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
        else:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=back_to_main_keyboard())
    else:
        tokens.append(message.text)
        bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω {len(tokens)}/15 –¥–æ–±–∞–≤–ª–µ–Ω.")
        bot.register_next_step_handler(message, collect_tokens, tokens)

@bot.message_handler(func=lambda message: message.text == "üíº –ü—Ä–æ—Ñ–∏–ª—å")
def profile(message):
    user_id = str(message.chat.id)
    user_data = users_data.get(user_id, {})
    balance = user_data.get('balance', 0.0)
    hold = user_data.get('hold', 0.0)
    total_tokens = user_data.get('total_tokens', 0)
    
    profile_text = (
        f"üÜî –í–∞—à ID: {user_id}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±–ª–µ–π\n"
        f"ü™ô –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {total_tokens}\n"
        f"üîí –°—É–º–º–∞ –≤ —Ö–æ–ª–¥–µ: {hold:.2f} —Ä—É–±–ª–µ–π"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏", callback_data="withdraw"))
    bot.send_message(message.chat.id, profile_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "withdraw")
def withdraw_money(call):
    user_id = str(call.message.chat.id)
    balance = users_data[user_id]['balance']
    if balance >= 5:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–û—Ç–º–µ–Ω–∏—Ç—å")
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ Payeer –∞–¥—Ä–µ—Å:", reply_markup=markup)
        bot.register_next_step_handler(call.message, process_payeer_address)
    else:
        bot.send_message(call.message.chat.id, "–°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 5 —Ä—É–±–ª–µ–π.")

def process_payeer_address(message):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        bot.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")
        return

    payeer_address = message.text
    user_id = str(message.chat.id)
    balance = users_data[user_id]['balance']
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí∏ –í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data="confirm_withdrawal"))
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_withdrawal"))
    bot.send_message(message.chat.id, f"–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ {balance:.2f} —Ä—É–±–ª–µ–π –Ω–∞ –∞–¥—Ä–µ—Å {payeer_address}?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "confirm_withdrawal")
def confirm_withdrawal(call):
    user_id = str(call.message.chat.id)
    balance = users_data[user_id]['balance']
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞
    payeer_address = call.message.reply_markup.inline_keyboard[0][0].text.split('–Ω–∞ –∞–¥—Ä–µ—Å ')[-1]
    
    bot.send_message(call.message.chat.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
    bot.send_message(
        CHANNEL_ID, 
        f"üí∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n"
        f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
        f"üíµ –°—É–º–º–∞: {balance:.2f} —Ä—É–±–ª–µ–π\n"
        f"üì© –ê–¥—Ä–µ—Å Payeer: {payeer_address}"
    )
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_data[user_id]['balance'] = 0.0
    save_data(USERS_FILE, users_data)
    bot.send_message(call.message.chat.id, "–í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=back_to_main_keyboard())

@bot.callback_query_handler(func=lambda call: call.data == "cancel_withdrawal")
def cancel_withdrawal(call):
    bot.send_message(call.message.chat.id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=back_to_main_keyboard())

@bot.message_handler(func=lambda message: message.text == "üîß –ê–¥–º–∏–Ω–∫–∞" and str(message.chat.id) == ADMIN_ID)
def admin_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
    markup.add("–°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã")
    markup.add("üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω–∫–∞", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω—ã" and str(message.chat.id) == ADMIN_ID)
def check_tokens(message):
    pending_users = [user_id for user_id, user_data in users_data.items() if user_data['tokens']]
    if pending_users:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for user_id in pending_users:
            markup.add(user_id)
        markup.add("üîô –ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.")

@bot.message_handler(func=lambda message: str(message.chat.id) == ADMIN_ID and message.text in [user_id for user_id in users_data])
def review_user_tokens(message):
    user_id = message.text
    tokens = users_data[user_id]['tokens']
    tokens_text = '\n'.join(tokens)
    with open(f"{user_id}_tokens.txt", 'w') as file:
        file.write(tokens_text)
    with open(f"{user_id}_tokens.txt", 'rb') as file:
        bot.send_document(message.chat.id, file)
    os.remove(f"{user_id}_tokens.txt")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—Ç", "–ù–µ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—Ç")
    markup.add("üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–ò—Ç–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, process_token_approval, user_id)

def process_token_approval(message, user_id):
    if message.text == "–í—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—Ç":
        approve_tokens(user_id, len(users_data[user_id]['tokens']))
        bot.send_message(message.chat.id, "–¢–æ–∫–µ–Ω—ã –æ–¥–æ–±—Ä–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    elif message.text == "–ù–µ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—Ç":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤:")
        bot.register_next_step_handler(message, process_partial_approval, user_id)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.send_message(message.chat.id, "–ò—Ç–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–í—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—Ç", "–ù–µ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—Ç").add("üîô –ù–∞–∑–∞–¥"))

def process_partial_approval(message, user_id):
    try:
        count = int(message.text)
        approve_tokens(user_id, count)
        bot.send_message(message.chat.id, f"{count} —Ç–æ–∫–µ–Ω–æ–≤ –æ–¥–æ–±—Ä–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@bot.message_handler(func=lambda message: message.text == "–°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã" and str(message.chat.id) == ADMIN_ID)
def download_all_tokens(message):
    with open('all_tokens.txt', 'w') as file:
        for token in tokens_data:
            file.write(f"{token}\n")
    with open('all_tokens.txt', 'rb') as file:
        bot.send_document(message.chat.id, file)
    os.remove('all_tokens.txt')

bot.polling()
