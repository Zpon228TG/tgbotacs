import telebot
from telebot import types
import json
import os

API_TOKEN = '7024190964:AAEzgPV9RvoJMbBBShBvSo-K5yEIsq08D4I'
CHANNEL_ID = '@GameDevAssetsHub'
SUPPORT_BOT_LINK = 'https://t.me/your_support_bot'
TOKENS_FILE = 'tokens.json'
USERS_FILE = 'users.json'

bot = telebot.TeleBot(API_TOKEN)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def load_data(file_name):
    if os.path.exists(file_name):
        with open(file_name, 'r') as file:
            return json.load(file)
    else:
        return {}

def save_data(file_name, data):
    with open(file_name, 'w') as file:
        json.dump(data, file, indent=4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
tokens_data = load_data(TOKENS_FILE)
users_data = load_data(USERS_FILE)

def add_user(user_id):
    if user_id not in users_data:
        users_data[user_id] = {
            'balance': 0.0,
            'tokens': [],
            'hold': 0.0,
            'total_tokens': 0
        }
        save_data(USERS_FILE, users_data)

def add_tokens(user_id, tokens):
    users_data[user_id]['tokens'].extend(tokens)
    users_data[user_id]['hold'] += 0.01 * len(tokens)
    users_data[user_id]['total_tokens'] += len(tokens)
    save_data(USERS_FILE, users_data)

def approve_tokens(user_id, count):
    users_data[user_id]['balance'] += 0.01 * count
    users_data[user_id]['hold'] -= 0.01 * count
    save_data(USERS_FILE, users_data)

def reject_tokens(user_id, count):
    users_data[user_id]['hold'] -= 0.01 * count
    save_data(USERS_FILE, users_data)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def main_keyboard(is_admin=False):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
    markup.add("üíº –ü—Ä–æ—Ñ–∏–ª—å")
    markup.add("üÜò –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    if is_admin:
        markup.add("üîß –ê–¥–º–∏–Ω–∫–∞")
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.chat.id)
    is_admin = user_id == 'YOUR_ADMIN_ID'
    add_user(user_id)
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard(is_admin))

@bot.message_handler(func=lambda message: message.text == "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
def upload_tokens(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ß–µ—Ä–µ–∑ —Ñ–∞–π–ª", "–ß–µ—Ä–µ–∑ –±–æ—Ç–∞")
    markup.add("üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ß–µ—Ä–µ–∑ —Ñ–∞–π–ª")
def upload_tokens_file(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏ (–º–∞–∫—Å–∏–º—É–º 5 —à—Ç—É–∫).")

@bot.message_handler(content_types=['document'])
def handle_docs(message):
    if message.document.mime_type == 'text/plain':
        user_id = str(message.chat.id)
        file_info = bot.get_file(message.document.file_id)
        file = bot.download_file(file_info.file_path)
        tokens = file.decode('utf-8').splitlines()[:5]
        add_tokens(user_id, tokens)
        bot.send_message(user_id, f"–¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤. üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt).")

@bot.message_handler(func=lambda message: message.text == "üíº –ü—Ä–æ—Ñ–∏–ª—å")
def profile(message):
    user_id = str(message.chat.id)
    user_data = users_data.get(user_id, {})
    balance = user_data.get('balance', 0.0)
    hold = user_data.get('hold', 0.0)
    total_tokens = user_data.get('total_tokens', 0)
    
    profile_text = (
        f"üÜî –í–∞—à ID: {user_id}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±–ª–µ–π\n"
        f"ü™ô –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {total_tokens}\n"
        f"üîí –°—É–º–º–∞ –≤ —Ö–æ–ª–¥–µ: {hold:.2f} —Ä—É–±–ª–µ–π"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏", callback_data="withdraw"))
    bot.send_message(message.chat.id, profile_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "withdraw")
def withdraw_money(call):
    user_id = str(call.message.chat.id)
    balance = users_data[user_id]['balance']
    if balance >= 5:
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ Payeer –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(call.message, process_payeer_address)
    else:
        bot.send_message(call.message.chat.id, "–°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 5 —Ä—É–±–ª–µ–π.")

def process_payeer_address(message):
    payeer_address = message.text
    user_id = str(message.chat.id)
    balance = users_data[user_id]['balance']
    bot.send_message(message.chat.id, f"–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ {balance:.2f} —Ä—É–±–ª–µ–π –Ω–∞ –∞–¥—Ä–µ—Å {payeer_address}? (–¥–∞/–Ω–µ—Ç)")
    bot.register_next_step_handler(message, confirm_withdrawal, payeer_address, balance)

def confirm_withdrawal(message, payeer_address, balance):
    if message.text.lower() == "–¥–∞":
        bot.send_message(message.chat.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
        bot.send_message(
            CHANNEL_ID, 
            f"üí∞ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n\n"
            f"üÜî ID: {message.chat.id}\n"
            f"üí∏ –°—É–º–º–∞: {balance:.2f} —Ä—É–±–ª–µ–π\n"
            f"üì§ Payeer: {payeer_address}"
        )
        users_data[str(message.chat.id)]['balance'] = 0.0
        save_data(USERS_FILE, users_data)
    else:
        bot.send_message(message.chat.id, "–í—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")

@bot.message_handler(func=lambda message: message.text == "üÜò –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
def support(message):
    bot.send_message(message.chat.id, f"–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: {SUPPORT_BOT_LINK}")

# –ê–¥–º–∏–Ω–∫–∞
@bot.message_handler(func=lambda message: message.text == "üîß –ê–¥–º–∏–Ω–∫–∞" and str(message.chat.id) == 'YOUR_ADMIN_ID')
def admin_panel(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω—ã", "–°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã")
    markup.add("üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω–∫–∞", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω—ã" and str(message.chat.id) == 'YOUR_ADMIN_ID')
def review_tokens(message):
    pending_users = [uid for uid in users_data if users_data[uid]['hold'] > 0]
    if pending_users:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for uid in pending_users:
            markup.add(uid)
        markup.add("üîô –ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.")

@bot.message_handler(func=lambda message: message.text in users_data and str(message.chat.id) == 'YOUR_ADMIN_ID')
def review_user_tokens(message):
    user_id = message.text
    tokens = users_data[user_id]['tokens']
    tokens_text = '\n'.join(tokens)
    with open(f"{user_id}_tokens.txt", 'w') as file:
        file.write(tokens_text)
    with open(f"{user_id}_tokens.txt", 'rb') as file:
        bot.send_document(message.chat.id, file)
    os.remove(f"{user_id}_tokens.txt")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—Ç", "–ù–µ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—Ç")
    markup.add("üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–ò—Ç–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=markup)
    bot.register_next_step_handler(message, finalize_review, user_id)

def finalize_review(message, user_id):
    if message.text == "–í—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—Ç":
        approve_tokens(user_id, len(users_data[user_id]['tokens']))
        bot.send_message(message.chat.id, "–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.")
    elif message.text == "–ù–µ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—Ç":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤:")
        bot.register_next_step_handler(message, partial_approve_tokens, user_id)
    else:
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.")

def partial_approve_tokens(message, user_id):
    try:
        count = int(message.text)
        approve_tokens(user_id, count)
        reject_tokens(user_id, len(users_data[user_id]['tokens']) - count)
        bot.send_message(message.chat.id, "–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤.")

@bot.message_handler(func=lambda message: message.text == "–°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã" and str(message.chat.id) == 'YOUR_ADMIN_ID')
def download_all_tokens(message):
    all_tokens = [token for uid in users_data for token in users_data[uid]['tokens']]
    tokens_text = '\n'.join(all_tokens)
    with open("all_tokens.txt", 'w') as file:
        file.write(tokens_text)
    with open("all_tokens.txt", 'rb') as file:
        bot.send_document(message.chat.id, file)
    os.remove("all_tokens.txt")

bot.polling()
