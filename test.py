import telebot
import json
import os
from telebot import types

API_TOKEN = '7024190964:AAEzgPV9RvoJMbBBShBvSo-K5yEIsq08D4I'
CHANNEL_ID = '@GameDevAssetsHub'
LOG_CHANNEL_ID = '@YourLogChannelID'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
SUPPORT_BOT_LINK = 'https://t.me/your_support_bot'
TOKENS_FILE = 'tokens.json'
USERS_FILE = 'users.json'
ADMIN_ID = '6578018656'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

bot = telebot.TeleBot(API_TOKEN)

def load_json(file_path):
    try:
        with open(file_path, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_json(file_path, data):
    with open(file_path, 'w') as f:
        json.dump(data, f, indent=4)

def log_action(message):
    bot.send_message(LOG_CHANNEL_ID, message)

def add_user(user_id):
    users_data = load_json(USERS_FILE)
    if str(user_id) not in users_data:
        users_data[str(user_id)] = {
            'balance': 0.0,
            'tokens_loaded': 0,
            'tokens_in_hold': 0.0
        }
        save_json(USERS_FILE, users_data)

def add_tokens(user_id, tokens):
    tokens_data = load_json(TOKENS_FILE)
    new_tokens = []
    for token in tokens:
        token = token.strip()
        if token and token not in tokens_data:
            tokens_data[token] = user_id
            new_tokens.append(token)
    if new_tokens:
        save_json(TOKENS_FILE, tokens_data)
        users_data = load_json(USERS_FILE)
        users_data[str(user_id)]['tokens_loaded'] += len(new_tokens)
        users_data[str(user_id)]['balance'] += len(new_tokens) * 0.01
        save_json(USERS_FILE, users_data)
        log_action(f"#TokenAdded - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª {len(new_tokens)} —Ç–æ–∫–µ–Ω–æ–≤")
        return len(new_tokens)
    return 0

def main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã', '–ü—Ä–æ—Ñ–∏–ª—å', '–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏', '–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞']
    keyboard.add(*buttons)
    return keyboard

def back_to_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã', '–ü—Ä–æ—Ñ–∏–ª—å', '–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏', '–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞']
    keyboard.add(*buttons)
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    add_user(user_id)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())
    log_action(f"#NewUser - {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@bot.message_handler(func=lambda message: message.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã')
def upload_tokens(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ß–µ—Ä–µ–∑ —Ñ–∞–π–ª", "–ß–µ—Ä–µ–∑ –±–æ—Ç–∞", "üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ß–µ—Ä–µ–∑ —Ñ–∞–π–ª")
def upload_tokens_file(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏.")

@bot.message_handler(content_types=['document'])
def handle_docs(message):
    if message.document.mime_type == 'text/plain':
        user_id = message.from_user.id
        file_info = bot.get_file(message.document.file_id)
        file = bot.download_file(file_info.file_path)
        tokens = file.decode('utf-8').splitlines()
        count = add_tokens(user_id, tokens)
        if count > 0:
            bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {count} —Ç–æ–∫–µ–Ω–æ–≤. üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        else:
            bot.send_message(message.chat.id, "–í—Å–µ —Ç–æ–∫–µ–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt).")

@bot.message_handler(func=lambda message: message.text == "–ß–µ—Ä–µ–∑ –±–æ—Ç–∞")
def upload_tokens_via_bot(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –ø–æ –æ–¥–Ω–æ–º—É (–º–∞–∫—Å–∏–º—É–º 15). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
    bot.register_next_step_handler(message, collect_tokens, [])

def collect_tokens(message, tokens):
    if message.text.lower() == '–≥–æ—Ç–æ–≤–æ' or len(tokens) == 15:
        if tokens:
            count = add_tokens(message.from_user.id, tokens)
            if count > 0:
                bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {count} —Ç–æ–∫–µ–Ω–æ–≤. üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            else:
                bot.send_message(message.chat.id, "–í—Å–µ —Ç–æ–∫–µ–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
        else:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=back_to_main_keyboard())
    else:
        tokens.append(message.text)
        bot.send_message(message.chat.id, f"–¢–æ–∫–µ–Ω {len(tokens)}/15 –¥–æ–±–∞–≤–ª–µ–Ω.")
        bot.register_next_step_handler(message, collect_tokens, tokens)

@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ—Ñ–∏–ª—å')
def profile(message):
    user_id = message.from_user.id
    users_data = load_json(USERS_FILE)
    user_info = users_data.get(str(user_id), None)
    if user_info:
        profile_text = (f"üÜî –í–∞—à ID: {user_id}\n"
                        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_info['balance']:.2f} —Ä—É–±.\n"
                        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {user_info['tokens_loaded']}\n"
                        f"üíº –°—É–º–º–∞ –≤ —Ö–æ–ª–¥–µ: {user_info['tokens_in_hold']:.2f} —Ä—É–±.")
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton('–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏'))
        bot.send_message(message.chat.id, profile_text, reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(func=lambda message: message.text == '–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏')
def request_withdrawal(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 5 —Ä—É–±–ª–µ–π).")
    bot.register_next_step_handler(msg, process_withdrawal_request)

def process_withdrawal_request(message):
    user_id = message.from_user.id
    amount = float(message.text)
    if amount < 5:
        bot.send_message(message.chat.id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ - 5 —Ä—É–±–ª–µ–π.")
        return

    users_data = load_json(USERS_FILE)
    user_info = users_data.get(str(user_id), None)
    if user_info and user_info['balance'] >= amount:
        user_info['tokens_in_hold'] += amount
        user_info['balance'] -= amount
        save_json(USERS_FILE, users_data)

        request_text = (f"üíµ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n"
                        f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                        f"üí∞ –°—É–º–º–∞: {amount:.2f} —Ä—É–±–ª–µ–π\n"
                        f"üì© –ê–¥—Ä–µ—Å Payeer: {message.text}\n"
                        f"‚úÖ –ù–∞–∂–º–∏—Ç–µ '–í—ã–ø–ª–∞—á–µ–Ω–æ', —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É.\n"
                        f"üö´ –ù–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å', —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("–í—ã–ø–ª–∞—á–µ–Ω–æ", callback_data=f'confirm_{user_id}_{amount}'),
            types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f'cancel_{user_id}')
        )
        bot.send_message(CHANNEL_ID, request_text, reply_markup=keyboard)
        bot.send_message(message.chat.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
        log_action(f"#WithdrawRequest - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ {amount:.2f} —Ä—É–±–ª–µ–π")
    else:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_'))
def confirm_withdrawal(call):
    _, user_id, amount = call.data.split('_')
    user_id = int(user_id)
    amount = float(amount)

    users_data = load_json(USERS_FILE)
    user_info = users_data.get(str(user_id), None)
    if user_info:
        user_info['tokens_in_hold'] -= amount
        save_json(USERS_FILE, users_data)
        bot.send_message(CHANNEL_ID, f"üíµ –í—ã–ø–ª–∞—á–µ–Ω–æ: {amount:.2f} —Ä—É–±–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        bot.send_message(call.message.chat.id, "–í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
        log_action(f"#WithdrawalSuccess - –í—ã–ø–ª–∞—á–µ–Ω–æ {amount:.2f} —Ä—É–±–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_'))
def cancel_withdrawal(call):
    user_id = call.data.split('_')[1]
    bot.send_message(call.message.chat.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω.")
    log_action(f"#WithdrawalCancelled - –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –æ—Ç–º–µ–Ω–µ–Ω")

@bot.message_handler(func=lambda message: message.text == '–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
def tech_support(message):
    bot.send_message(message.chat.id, f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à –±–æ—Ç: {SUPPORT_BOT_LINK}")

if __name__ == "__main__":
    bot.polling(none_stop=True)
