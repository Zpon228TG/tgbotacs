import telebot
from telebot import types
import json
import datetime
import pytz
import os

TOKEN = '7053322665:AAFe3nW8Ls3oThVaA1gDXCq7biaaolWe7IA'
ADMIN_ID = 750334025

bot = telebot.TeleBot(TOKEN)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'data.json'
MODERATORS_FILE = 'moderators.json'
BIRTHDAYS_PATH = '.'  # –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
SCHEDULE_PHOTO_PATH = '.'  # –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if not os.path.exists(DATA_FILE):
        return {'schedule': {}, 'access_list': [], 'events': [], 'schedule_photo': None}
    with open(DATA_FILE, 'r') as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)

def load_moderators():
    if not os.path.exists(MODERATORS_FILE):
        return [ADMIN_ID]
    with open(MODERATORS_FILE, 'r') as f:
        return json.load(f)

def save_moderators(moderators):
    with open(MODERATORS_FILE, 'w') as f:
        json.dump(moderators, f, indent=4)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def has_access(user_id):
    data = load_data()
    return user_id in data['access_list'] or user_id == ADMIN_ID

def is_moderator(user_id):
    moderators = load_moderators()
    return user_id in moderators

# –ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('üìÖ –ò–º–µ–Ω–∏–Ω–Ω–∏–∫–∏', 'üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
    if is_moderator(message.from_user.id):
        markup.add('üëë –ê–¥–º–∏–Ω–∫–∞')
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=markup)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞–º–∏
@bot.message_handler(regexp="üìÖ –ò–º–µ–Ω–∏–Ω–Ω–∏–∫–∏")
def birthdays(message):
    month = datetime.datetime.now().strftime("%B").lower()
    file_path = os.path.join(BIRTHDAYS_PATH, f'{month}.jpg')
    if os.path.exists(file_path):
        bot.send_photo(message.chat.id, open(file_path, 'rb'))
    else:
        bot.send_message(message.chat.id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–µ—Å—è—Ü–∞ {month} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏
@bot.message_handler(regexp="üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def schedule(message):
    data = load_data()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if data['schedule_photo']:
        markup.add('üñºÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∫ —Ñ–æ—Ç–æ', 'üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∫ —Ç–µ–∫—Å—Ç')
    else:
        markup.add('üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∫ —Ç–µ–∫—Å—Ç')
    markup.add('üîô –ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=markup)

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∫ —Ç–µ–∫—Å—Ç
@bot.message_handler(regexp="üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∫ —Ç–µ–∫—Å—Ç")
def view_schedule_text(message):
    data = load_data()
    if not data['schedule']:
        bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
    for day in days:
        markup.add(day)
    markup.add('üîô –ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=markup)

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∫ —Ç–µ–∫—Å—Ç: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
@bot.message_handler(func=lambda message: message.text in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞'])
def show_schedule_text(message):
    day = message.text
    data = load_data()
    schedule = data.get('schedule', {}).get(day, [])
    if schedule:
        response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}:\n\n"
        for i, lesson in enumerate(schedule):
            response += f"{i+1}. {lesson['lesson']} - {lesson['teacher']}\n"
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∫ —Ñ–æ—Ç–æ
@bot.message_handler(regexp="üñºÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∫ —Ñ–æ—Ç–æ")
def view_schedule_photo(message):
    data = load_data()
    if data['schedule_photo']:
        bot.send_photo(message.chat.id, open(data['schedule_photo'], 'rb'))
    else:
        bot.send_message(message.chat.id, "–§–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

# –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@bot.message_handler(regexp="üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
def events(message):
    if is_moderator(message.from_user.id):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', 'üîô –ù–∞–∑–∞–¥')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(regexp="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
def add_event(message):
    if is_moderator(message.from_user.id):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
        bot.register_next_step_handler(msg, process_event_date)

def process_event_date(message):
    date = message.text
    try:
        datetime.datetime.strptime(date, "%Y-%m-%d")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
        bot.register_next_step_handler(msg, process_event_time, date)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")

def process_event_time(message, date):
    time = message.text
    try:
        datetime.datetime.strptime(time, "%H:%M")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        bot.register_next_step_handler(msg, process_event_description, date, time)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")

def process_event_description(message, date, time):
    description = message.text
    data = load_data()
    data['events'].append({"date": date, "time": time, "description": description})
    save_data(data)
    bot.send_message(message.chat.id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

# –ê–¥–º–∏–Ω–∫–∞
@bot.message_handler(regexp="üëë –ê–¥–º–∏–Ω–∫–∞")
def admin_panel(message):
    if is_moderator(message.from_user.id):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø', '‚ûñ –£–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø', 'üìÖ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üîô –ù–∞–∑–∞–¥')
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=markup)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
@bot.message_handler(regexp="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø")
def add_access(message):
    if is_moderator(message.from_user.id):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:")
        bot.register_next_step_handler(msg, process_add_access)

def process_add_access(message):
    user_id = int(message.text)
    data = load_data()
    if user_id in data['access_list']:
        bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø.")
    else:
        data['access_list'].append(user_id)
        save_data(data)
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")

# –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
@bot.message_handler(regexp="‚ûñ –£–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø")
def remove_access(message):
    if is_moderator(message.from_user.id):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:")
        bot.register_next_step_handler(msg, process_remove_access)

def process_remove_access(message):
    user_id = int(message.text)
    data = load_data()
    if user_id in data['access_list']:
        data['access_list'].remove(user_id)
        save_data(data)
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        if user_id == message.from_user.id:
            bot.send_message(message.chat.id, "–í—ã –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–æ–≤.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: —Ñ–æ—Ç–æ
@bot.message_handler(regexp="üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ")
def add_schedule_photo(message):
    if is_moderator(message.from_user.id):
        if load_data().get('schedule_photo'):
            bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
            return
        msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_schedule_photo)

def process_schedule_photo(message):
    if message.photo:
        file_info = bot.get_file(message.photo[-1].file_id)
        file_path = file_info.file_path
        file = bot.download_file(file_path)
        with open(os.path.join(SCHEDULE_PHOTO_PATH, 'schedule.jpg'), 'wb') as f:
            f.write(file)
        data = load_data()
        data['schedule_photo'] = os.path.join(SCHEDULE_PHOTO_PATH, 'schedule.jpg')
        save_data(data)
        bot.send_message(message.chat.id, "–§–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")

# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: —Ñ–æ—Ç–æ
@bot.message_handler(regexp="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def delete_schedule_photo(message):
    if is_moderator(message.from_user.id):
        data = load_data()
        if data.get('schedule_photo'):
            os.remove(data['schedule_photo'])
            data['schedule_photo'] = None
            save_data(data)
            bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            bot.send_message(message.chat.id, "–§–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(regexp="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def modify_schedule(message):
    if is_moderator(message.from_user.id):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
        for day in days:
            markup.add(day)
        markup.add('üîô –ù–∞–∑–∞–¥')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, process_modify_schedule_day)

def process_modify_schedule_day(message):
    day = message.text
    data = load_data()
    schedule = data.get('schedule', {}).get(day, [])
    if schedule:
        response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}:\n\n"
        for i, lesson in enumerate(schedule):
            response += f"{i+1}. {lesson['lesson']} - {lesson['teacher']}\n"
        bot.send_message(message.chat.id, response)
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
        bot.register_next_step_handler(msg, process_edit_lesson_number, day, schedule)
    else:
        bot.send_message(message.chat.id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

def process_edit_lesson_number(message, day, schedule):
    try:
        lesson_number = int(message.text) - 1
        if 0 <= lesson_number < len(schedule):
            lesson = schedule[lesson_number]
            msg = bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n–£—Ä–æ–∫: {lesson['lesson']}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson['teacher']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:")
            bot.register_next_step_handler(msg, process_edit_lesson_name, day, lesson_number, schedule)
        else:
            bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞.")

def process_edit_lesson_name(message, day, lesson_number, schedule):
    new_lesson_name = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
    bot.register_next_step_handler(msg, process_edit_lesson_teacher, day, lesson_number, new_lesson_name, schedule)

def process_edit_lesson_teacher(message, day, lesson_number, new_lesson_name, schedule):
    new_teacher_name = message.text
    schedule[lesson_number] = {"lesson": new_lesson_name, "teacher": new_teacher_name}
    data = load_data()
    data['schedule'][day] = schedule
    save_data(data)
    bot.send_message(message.chat.id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

# –°–±—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(regexp="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def reset_schedule(message):
    if is_moderator(message.from_user.id):
        data = load_data()
        if data.get('schedule_photo'):
            os.remove(data['schedule_photo'])
            data['schedule_photo'] = None
        data['schedule'] = {}
        save_data(data)
        bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ.")

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
@bot.message_handler(regexp="üîô –ù–∞–∑–∞–¥")
def go_back(message):
    start(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    if message.text.lower() == '–ø–æ–≥–æ–¥–∞':
        bot.send_message(message.chat.id, "–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è!")
    else:
        bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

bot.polling(none_stop=True)
