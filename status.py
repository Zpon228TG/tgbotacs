import telebot
from telebot import types
import json
import datetime
import os

TOKEN = '7053322665:AAFe3nW8Ls3oThVaA1gDXCq7biaaolWe7IA'
ADMIN_ID = 750334025

bot = telebot.TeleBot(TOKEN)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'data.json'
MODERATORS_FILE = 'moderators.json'
BIRTHDAYS_PATH = '.'  # –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
SCHEDULE_PHOTO_PATH = '.'  # –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏


def load_events():
    try:
        with open('events.json', 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return []

def save_events(events):
    with open('events.json', 'w') as file:
        json.dump(events, file, indent=4)


def load_data():
    if not os.path.exists(DATA_FILE):
        return {
            'schedule': {},
            'access_list': [],
            'events': [],
            'schedule_photo': None,
            'birthdays': {}  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á 'birthdays' –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        }
    with open(DATA_FILE, 'r') as f:
        data = json.load(f)
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏
        data.setdefault('birthdays', {})
        data.setdefault('schedule', {})
        data.setdefault('access_list', [])
        data.setdefault('events', [])
        data.setdefault('schedule_photo', None)
        return data


def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)

@bot.message_handler(commands=['start'])
def start(message):
    if not has_access(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('üìÖ –ò–º–µ–Ω–∏–Ω–Ω–∏–∫–∏', 'üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
    if is_moderator(message.from_user.id):
        markup.add('üëë –ê–¥–º–∏–Ω–∫–∞')
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=markup)

@bot.message_handler(regexp="üëë –ê–¥–º–∏–Ω–∫–∞")
def admin_menu(message):
    if not is_moderator(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('‚ûï –í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø', 'üóëÔ∏è –û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø', 'üîô –ù–∞–∑–∞–¥','üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üì∏ –î–æ–±–∞–≤–∏—Ç—å –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤', '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω –º–µ–Ω—é:", reply_markup=markup)

@bot.message_handler(regexp="üîô –ù–∞–∑–∞–¥")
def back_to_main(message):
    start(message)



def load_moderators():
    if not os.path.exists(MODERATORS_FILE):
        return [ADMIN_ID]
    with open(MODERATORS_FILE, 'r') as f:
        return json.load(f)

def save_moderators(moderators):
    with open(MODERATORS_FILE, 'w') as f:
        json.dump(moderators, f, indent=4)

def has_access(user_id):
    data = load_data()
    return user_id in data['access_list'] or user_id == ADMIN_ID


def is_moderator(user_id):
    moderators = load_moderators()
    return user_id in moderators




@bot.message_handler(regexp="‚ûï –í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø")
def grant_access(message):
    if not is_moderator(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø:")
    bot.register_next_step_handler(msg, process_grant_access)

def process_grant_access(message):
    try:
        user_id = int(message.text)
        data = load_data()
        if user_id in data['access_list']:
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø.")
        else:
            data['access_list'].append(user_id)
            save_data(data)
            bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID.")

@bot.message_handler(regexp="üóëÔ∏è –û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø")
def revoke_access(message):
    if not is_moderator(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø:")
    bot.register_next_step_handler(msg, process_revoke_access)

def process_revoke_access(message):
    try:
        user_id = int(message.text)
        data = load_data()
        if user_id in data['access_list']:
            data['access_list'].remove(user_id)
            save_data(data)
            bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        else:
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID.")


# –ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start(message):
    if not has_access(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('üìÖ –ò–º–µ–Ω–∏–Ω–Ω–∏–∫–∏', 'üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
    if is_moderator(message.from_user.id):
        markup.add('üëë –ê–¥–º–∏–Ω–∫–∞')
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=markup)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞–º–∏
@bot.message_handler(regexp="üìÖ –ò–º–µ–Ω–∏–Ω–Ω–∏–∫–∏")
def birthdays(message):
    if not has_access(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    data = load_data()
    month = datetime.datetime.now().strftime("%B").lower()
    file_path = data['birthdays'].get(month)
    if file_path and os.path.exists(file_path):
        bot.send_photo(message.chat.id, open(file_path, 'rb'))
    else:
        bot.send_message(message.chat.id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–µ—Å—è—Ü–∞ {month} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
@bot.message_handler(regexp="üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def schedule(message):
    if not has_access(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    data = load_data()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if data.get('schedule_photo'):
        markup.add('üñºÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    markup.add('üîô –ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=markup)

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∫ —Ñ–æ—Ç–æ
@bot.message_handler(regexp="üñºÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def view_schedule_photo(message):
    if not has_access(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    data = load_data()
    if data.get('schedule_photo'):
        bot.send_photo(message.chat.id, open(data['schedule_photo'], 'rb'))
    else:
        bot.send_message(message.chat.id, "–§–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ
@bot.message_handler(regexp="üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ")
def add_schedule_photo(message):
    if not is_moderator(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    if load_data().get('schedule_photo'):
        bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
        return

    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_schedule_photo)

def process_schedule_photo(message):
    if message.photo:
        file_info = bot.get_file(message.photo[-1].file_id)
        file_path = file_info.file_path
        file = bot.download_file(file_path)
        with open(os.path.join(SCHEDULE_PHOTO_PATH, 'schedule.jpg'), 'wb') as f:
            f.write(file)

@bot.message_handler(regexp="üëë –ê–¥–º–∏–Ω–∫–∞")
def admin_panel(message):
    if not has_access(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    if is_moderator(message.from_user.id):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üì∏ –î–æ–±–∞–≤–∏—Ç—å –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤', '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        markup.add('üîô –ù–∞–∑–∞–¥')
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=markup)

        data = load_data()
        data['schedule_photo'] = os.path.join(SCHEDULE_PHOTO_PATH, 'schedule.jpg')
        save_data(data)
        bot.send_message(message.chat.id, "–§–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")


# –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: —Ñ–æ—Ç–æ
@bot.message_handler(regexp="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def delete_schedule_photo(message):
    if not is_moderator(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    data = load_data()
    if data.get('schedule_photo'):
        os.remove(data['schedule_photo'])
        data['schedule_photo'] = None
        save_data(data)
        bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "–§–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤
@bot.message_handler(regexp="üì∏ –î–æ–±–∞–≤–∏—Ç—å –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤")
def add_birthdays(message):
    if not is_moderator(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    data = load_data()
    month_names = [datetime.date(1900, i, 1).strftime('%B').lower() for i in range(1, 13)]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for month in month_names:
        if data['birthdays'].get(month):
            markup.add(f"‚úÖ {month.capitalize()}")
        else:
            markup.add(f"‚ùå {month.capitalize()}")
    markup.add('üîô –ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text.startswith('‚úÖ') or message.text.startswith('‚ùå'))
def handle_month_selection(message):
    if not is_moderator(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    month = message.text[2:].lower()
    data = load_data()
    month_names = [datetime.date(1900, i, 1).strftime('%B').lower() for i in range(1, 13)]
    if month in month_names:
        if message.text.startswith('‚úÖ'):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add('–î–∞', '–ù–µ—Ç')
            bot.send_message(message.chat.id, f"–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –¥–ª—è {month.capitalize()}?", reply_markup=markup)
        elif message.text.startswith('‚ùå'):
            msg = bot.send_message(message.chat.id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –¥–ª—è {month.capitalize()}:")
            bot.register_next_step_handler(msg, process_birthdays_photo, month)
    else:
        bot.send_message(message.chat.id, "–í—ã–±—Ä–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü.")

def process_birthdays_photo(message, month):
    if message.photo:
        file_info = bot.get_file(message.photo[-1].file_id)
        file_path = file_info.file_path
        file = bot.download_file(file_path)
        file_name = f"birthdays_{month}.jpg"
        with open(os.path.join(BIRTHDAYS_PATH, file_name), 'wb') as f:
            f.write(file)
        data = load_data()
        data['birthdays'][month] = os.path.join(BIRTHDAYS_PATH, file_name)
        save_data(data)
        bot.send_message(message.chat.id, "–§–æ—Ç–æ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")



@bot.message_handler(regexp="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
def add_moderator(message):
    if not is_moderator(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:")
    bot.register_next_step_handler(msg, process_add_moderator)

def process_add_moderator(message):
    try:
        user_id = int(message.text)
        moderators = load_moderators()
        if user_id in moderators:
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        else:
            moderators.append(user_id)
            save_moderators(moderators)
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID.")



                            
@bot.message_handler(func=lambda message: message.text in ['–î–∞', '–ù–µ—Ç'])
def handle_remove_birthdays_photo(message):
    if not is_moderator(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    if message.text == '–î–∞':
        # –•—Ä–∞–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—è—Ü–µ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ user_data
        month = bot.get_chat_administrators(message.chat.id)
        if month:
            data = load_data()
            if month in data['birthdays']:
                os.remove(data['birthdays'][month])
                del data['birthdays'][month]
                save_data(data)
                bot.send_message(message.chat.id, f"–§–æ—Ç–æ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –¥–ª—è {month.capitalize()} —É–¥–∞–ª–µ–Ω–æ.")
            else:
                bot.send_message(message.chat.id, "–§–æ—Ç–æ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—è—Ü –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")


@bot.message_handler(regexp="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
def remove_moderator(message):
    if not is_moderator(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:")
    bot.register_next_step_handler(msg, process_remove_moderator)

def process_remove_moderator(message):
    try:
        user_id = int(message.text)
        moderators = load_moderators()
        if user_id == ADMIN_ID:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        if user_id in moderators:
            moderators.remove(user_id)
            save_moderators(moderators)
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        else:
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID.")



# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.message_handler(regexp="üîô –ù–∞–∑–∞–¥")
def go_back(message):
    if not has_access(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é

@bot.message_handler(regexp="üéâ –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
def create_event(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD):")
    bot.register_next_step_handler(message, process_event_date)

def process_event_date(message):
    user_id = message.from_user.id
    event_date = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    try:
        datetime.datetime.strptime(event_date, "%Y-%m-%d")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    bot.register_next_step_handler(message, process_event_description, event_date, user_id)

def process_event_description(message, event_date, user_id):
    description = message.text
    events = load_events()
    events.append({'date': event_date, 'description': description, 'creator_id': user_id})
    save_events(events)
    bot.send_message(message.chat.id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")

@bot.message_handler(regexp="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
def delete_event(message):
    user_id = message.from_user.id
    events = load_events()
    if not events:
        bot.send_message(message.chat.id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    # –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD):")
    bot.register_next_step_handler(message, process_delete_event, user_id, events)

def process_delete_event(message, user_id, events):
    event_date = message.text
    event_found = False
    for event in events:
        if event['date'] == event_date and event['creator_id'] == user_id:
            events.remove(event)
            save_events(events)
            bot.send_message(message.chat.id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
            event_found = True
            break
    if not event_found:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
@bot.message_handler(regexp="üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
def schedule1(message):
    if not has_access(message.from_user.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    data = load_data()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('üéâ –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ','üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
    markup.add('üîô –ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=markup)





# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
bot.polling()
